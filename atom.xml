<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hsoh&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-04-20T10:38:14.448Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>hsoh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>fastcampus TDD 학습 01</title>
    <link href="http://yoursite.com/2021/04/12/fastcampus-tdd-01/"/>
    <id>http://yoursite.com/2021/04/12/fastcampus-tdd-01/</id>
    <published>2021-04-12T05:45:17.000Z</published>
    <updated>2021-04-20T10:38:14.448Z</updated>
    
    <content type="html"><![CDATA[<p>개발 방식에 문제는 없지만 혼자 개발하는 일이 많아지면서 TDD를 적용하기로 마음먹었다. 그 이유는 이규원님이 <a href="https://www.youtube.com/watch?v=UttzAcbuk5k" target="_blank" rel="noopener">당신들의 TDD가 실패하는 이유</a>를 보다가 지금의 내상황에과 비슷하다고 생각했다. 적용하기 전에 학습부터! </p><a id="more"></a>  <p>적용하기 위해 <a href="https://fastcampus.co.kr/dev_red_ygw" target="_blank" rel="noopener">현실 세상의 TDD 강의</a> 를 회사에 요청하여 구매했고 사내 개발자들과 공유하기 위해 정라하도록 하겠다.</p><ol start="2"><li>테스트 주도 개발 기초</li></ol><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a><strong>Table of Contents</strong></h2><ul><li><a href="#기능 명세란">기능 명세란</a></li><li><a href="#테스트 기법">테스트 기법</a></li><li><a href="#코드 분해">코드 분해</a></li><li><a href="#테스트 코드">테스트 코드</a></li><li><a href="#작업환경 정리/리팩터링">작업 환경 정리/리팩터링</a></li><li><a href="테스트 주도 개발">테스트 주도 개발</a></li><li><a href="#Reference">Reference</a></li><li><a href="#Contributors">Contributors</a></li></ul><h2 id="기능-명세란"><a href="#기능-명세란" class="headerlink" title="기능 명세란"></a>기능 명세란</h2><ul><li><p>입력과 출력에 대한 기대 동작들</p></li><li><p>코드의 명세 또는 요구사항</p></li><li><p>도메인</p><ul><li>소프트웨어가 풀어야할 문제가 정의되는 공간</li><li>도메인에서 출발함</li><li>문제를 충분히 이해하지 못하면 문제를 푸는 도구를 만들 수 없다</li><li>도메인 지식 흐름<ul><li>비지니스 전문가 -&gt; 분석가(제품 관리자/서비스 기획자/프로그래머) -&gt; 프로그래머 -&gt; 컴퓨터</li><li>&lt;- 목적/추상적 ————————————————————– 수단/구체적 -&gt;</li></ul></li></ul></li><li><p>프로그래머와 기능 명세</p><ul><li>도메인 지식을 컴퓨터에 전달할 때엔 모든 요소들이 명확히 결정될 수 밖에 없음</li><li>명확한 도메인 지식을 확보하지 못한 프로그래머는 지식 흐름 상류에 지식 보강을 요청해야함</li><li>스스로 결정을 내리면 도메인 지식 투영에 오차를 발생 또는 무책임하고 위험한 도박임</li></ul></li></ul><h2 id="테스트-기법"><a href="#테스트-기법" class="headerlink" title="테스트 기법"></a>테스트 기법</h2><ul><li>수동테스트<ul><li>QA가 하는 일</li><li>최종 사용자의 사용 경험과 가장 비슷하게 검증</li><li>가장 온정한 코드 실행</li><li>인수 테스트로 사용됨</li><li>단점 : 실행 비용이 높고 결과의 변동이 큼</li></ul></li><li>회귀테스트<ul><li>환경의 변화에 따라 기존 기능이 오작동 하는 경우 </li><li>시간이 지날수록 회귀테스트 대상이 늘어남</li></ul></li><li>테스트 자동화<ul><li>기능을 검증하는 코드를 작성(사람 대신 코드가 테스트함)</li><li>테스트 코드 작성 비용이 소비</li><li>실행 비용이 낮고 결과의 신뢰도가 높음</li><li>테스트 코드 작성과 관리가 프로그래머 역량에 크게 영향을 받음</li></ul></li><li>인수 테스트<ul><li>배치된 시스템을 대상으로 검증(현장과 동일하거나 유사한 상태로 테스트)</li><li>전체 시스템 이상 여부 신뢰도가 높음</li><li>높은 비용, 피드백 품질이 낮음</li></ul></li><li>단위 테스트<ul><li>시스템의 일부를 대상으로 검증</li><li>낮은 비용, 높은 피드백 품질</li><li>전체 시스템 이상 여부 신뢰도가 낮음</li></ul></li></ul><h2 id="코드-분해"><a href="#코드-분해" class="headerlink" title="코드 분해"></a>코드 분해</h2><ul><li>문제의 크기</li><li>코드 재사용<ul><li>반복되는 문제의 풀이는 재사용 가능</li><li>소프트웨어 개발 비용 절감</li></ul></li><li>모듈화<ul><li>분해<ul><li>큰 시스템은 더 작은 하위 시스템으로 분해/교체 가능</li></ul></li><li>조립<ul><li>작은 시스템은 더 큰 사위 시스템으로 조립가능</li><li>모듈 재사용 가능</li><li>라이브러리화 가능</li></ul></li><li>단위 테스트</li></ul></li></ul><h2 id="테스트-코드"><a href="#테스트-코드" class="headerlink" title="테스트 코드"></a>테스트 코드</h2><ul><li>가시적이고 구체적인 목표</li><li>자가검증</li><li>반복실행</li><li>클라이언드</li><li>운영 코드보다 테스트 코드를 먼저 작성(테스트 우선 개발 이라고 함)<ul><li>명확하고 검증 가능한 목표를 설정한 후 목표를 달성</li><li>프로세스가 코딩에 앞선 목표 설정을 강요</li><li>프로그래머는 자신이 풀어야 할 문제를 구체적으로 이해해야함</li></ul></li></ul><h2 id="작업-환경-정리-리팩터링"><a href="#작업-환경-정리-리팩터링" class="headerlink" title="작업 환경 정리/리팩터링"></a>작업 환경 정리/리팩터링</h2><ul><li>정리된 환경에서의 작업 생상성이 높다</li><li>작업 환경의 생산성이 일정 수준 미만으로 떨어지면 더 이상 그 환경에서 작업 진행은 불가능</li><li>코드 == 작업환경, 코드 == 작업 결과물</li><li>코드작업에서 작업 환경 정리는 리팩터링이라고 부름</li><li>Re-factoring은 의미를 유지하며 코드베이스를 정리</li><li>의미 유지를 확인하는 방법은 <strong>테스트</strong></li></ul><h2 id="테스트-주도-개발"><a href="#테스트-주도-개발" class="headerlink" title="테스트 주도 개발"></a>테스트 주도 개발</h2><ul><li>RED -&gt; 실패하는 테스트 추가</li><li>GREEN -&gt; 테스트 통과, 최소한의 코딩</li><li>REFACTOR -&gt; 구현 설계 개선, 테스트 통과 유지</li><li>테스트 실패<ul><li>구체적인 하나의 요구사항을 검증하는 하나의 테스트를 추가</li><li>추가된 테스트가 실패하는지 확인</li></ul></li><li>테스트 성공<ul><li>추가된 테스트를 비롯해 모든 테스트가 성공하도록 운영 코드를 변경</li><li>테스트 성공은 요구사항 만족을 의미</li><li>테스트 성공을 위한 최소한의 변경</li></ul></li><li>리팩터링<ul><li>코드베이스 정리</li><li>구현 설계 개선(가독성, 적응성, 선능)</li><li>모든 테스트 성공을 전제</li></ul></li><li>핵심은 피드백<ul><li>정해진 절차가 아니라 짧은 주기로 지속되는 피드백</li><li>피드백에 기반해 안정적으로 지식과 코드를 늘려 나가는 것이 목적</li></ul></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://fastcampus.co.kr/dev_red_ygw" target="_blank" rel="noopener">현실 세상의 TDD 강의</a></li></ul><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;개발 방식에 문제는 없지만 혼자 개발하는 일이 많아지면서 TDD를 적용하기로 마음먹었다. 그 이유는 이규원님이 &lt;a href=&quot;https://www.youtube.com/watch?v=UttzAcbuk5k&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;당신들의 TDD가 실패하는 이유&lt;/a&gt;를 보다가 지금의 내상황에과 비슷하다고 생각했다. 적용하기 전에 학습부터! &lt;/p&gt;
    
    </summary>
    
      <category term="tdd" scheme="http://yoursite.com/categories/tdd/"/>
    
    
      <category term="tdd" scheme="http://yoursite.com/tags/tdd/"/>
    
      <category term="fastcampus" scheme="http://yoursite.com/tags/fastcampus/"/>
    
  </entry>
  
  <entry>
    <title>elasticsearch 튜토리얼</title>
    <link href="http://yoursite.com/2019/12/24/elasticsearch-tutorial/"/>
    <id>http://yoursite.com/2019/12/24/elasticsearch-tutorial/</id>
    <published>2019-12-24T06:09:45.000Z</published>
    <updated>2021-04-12T05:32:47.734Z</updated>
    
    <content type="html"><![CDATA[<p>elasticsearch란 아파치 Lucene 기반으로 개발한 오픈소스 검색엔진으로 많은 양의 데이터를 보관하고 실시간으로 분석할 수 있게 해준다. JSON 기반의 비정형 데이터 분산 검색과 분석을 지원하며, 다양한 기능을 플러그인 형태로 구현하여 적용할 수 있는 특징을 가진다. 본 문서에서는 설치 및 사용법(spring boot 연동)을 다룬다.<br><a id="more"></a>  </p><h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a><strong>Table of Contents</strong></h2><ul><li><a href="#elasticsearch-란">elasticsearch 란</a></li><li><a href="#Installation">Installation</a></li><li><a href="#기본-사용법">기본 사용법</a></li><li><a href="#Reference">Reference</a></li><li><a href="#Contributors">Contributors</a></li></ul><h2 id="Elasticsearch-란"><a href="#Elasticsearch-란" class="headerlink" title="Elasticsearch 란"></a>Elasticsearch 란</h2><p>Elasticsearch는 모든 유형의 데이터에 대한 실시간 검색 및 분석을 제공하는 오픈소스 검색 엔진으로 구조화되거나 구조화되지 않은 텍스트, 숫자 데이터 또는 지리 공간 데이터에 관계없이 Elasticsearch는 빠른 검색을 지원하는 방식으로 효율적으로 저장하고 색인을 생성 할 수 있다. </p><p>단순한 데이터 검색을 넘어 정보를 집계하여 데이터의 추세와 패턴을 발견 할 수 있고 데이터 및 쿼리 볼륨이 증가함에 따라 Elasticsearch의 분산 특성으로 인해 배포가 원활하게 확장 될 수 있습니다.</p><p>Elasticsearch는 Elastic Stack의 중심에있는 분산 검색 및 분석 엔진이다. Logstash and Beats를 사용하면 데이터를 수집, 집계 및 보강하고 Elasticsearch에 저장할 수 있고, Kibana를 사용하면 대화식으로 데이터를 탐색, 시각화, 공유, 데이터를 관리 등이 가능하다.</p><h5 id="elasticsearch와-관계형-DB-비교"><a href="#elasticsearch와-관계형-DB-비교" class="headerlink" title="elasticsearch와 관계형 DB 비교"></a>elasticsearch와 관계형 DB 비교</h5><table><thead><tr><th>Elasticsearch</th><th>관계형 DB</th></tr></thead><tbody><tr><td>Index</td><td>Database</td></tr><tr><td>Type</td><td>Table</td></tr><tr><td>Document</td><td>Row</td></tr><tr><td>Field</td><td>Column</td></tr><tr><td>Mapping</td><td>Schema</td></tr></tbody></table><table><thead><tr><th>Elasticsearch</th><th>관계형 DB</th><th>CRUD</th></tr></thead><tbody><tr><td>POST</td><td>INSERT</td><td>CREATE</td></tr><tr><td>GET</td><td>SELECT</td><td>READ</td></tr><tr><td>PUT</td><td>UPDATE</td><td>UPDATE</td></tr><tr><td>DELETE</td><td>DELETE</td><td>DELETE</td></tr></tbody></table><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><h5 id="튜토리얼-환경"><a href="#튜토리얼-환경" class="headerlink" title="튜토리얼 환경"></a>튜토리얼 환경</h5><p>ubuntu 18.04,  openjdk 11.0.5</p><h5 id="Elasticsearch-설치"><a href="#Elasticsearch-설치" class="headerlink" title="Elasticsearch 설치"></a>Elasticsearch 설치</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.5.1-amd64.deb</span><br><span class="line">$ dpkg -i elasticsearch-7.5.1-amd64.deb</span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> elasticsearch.service</span><br></pre></td></tr></table></figure><h5 id="Elasticsearch-실행-및-동작-테스트"><a href="#Elasticsearch-실행-및-동작-테스트" class="headerlink" title="Elasticsearch 실행 및 동작 테스트"></a>Elasticsearch 실행 및 동작 테스트</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service elasticsearch start   </span><br><span class="line">$ curl -X GET <span class="string">'localhost:9200'</span></span><br></pre></td></tr></table></figure><h5 id="Elasticsearch-종료"><a href="#Elasticsearch-종료" class="headerlink" title="Elasticsearch 종료"></a>Elasticsearch 종료</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service elasticsearch stop</span><br></pre></td></tr></table></figure><h2 id="기본-사용법"><a href="#기본-사용법" class="headerlink" title="기본 사용법"></a>기본 사용법</h2><p>Elasticsearch는 REST API를 통해 CRUD가 가능. URL의 계층에 따라 /index/type/document/field로 구분하여 사용.</p><h5 id="Index-CRD"><a href="#Index-CRD" class="headerlink" title="Index CRD"></a>Index CRD</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT http://localhost:9200/<span class="string">'class name'</span></span><br><span class="line">$ curl -X GET http://localhost:9200/<span class="string">'class name'</span>?pretty</span><br><span class="line">$ curl -X DELETE http://localhost:9200/<span class="string">'class name'</span></span><br></pre></td></tr></table></figure><h5 id="Document-CRUD"><a href="#Document-CRUD" class="headerlink" title="Document CRUD"></a>Document CRUD</h5><p>document는 index가 있을때 만들어도 되고, index가 없을때도 index명과 type명을 명시해주면 바로 document 생성이 가능.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/<span class="string">'document name'</span> -H <span class="string">'Content-type:application/json'</span> -d <span class="string">'&#123;"title":"algorithm","professor":"john"&#125;'</span></span><br><span class="line">$ curl -X POST http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/<span class="string">'document name'</span> -H <span class="string">'Content-type:application/json'</span> -d @data.json</span><br><span class="line"></span><br><span class="line">$ curl -X GET http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/<span class="string">'document name'</span></span><br><span class="line"></span><br><span class="line">$ curl -X DELETE http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/<span class="string">'document name'</span></span><br></pre></td></tr></table></figure><p>필드에 대한 업데이트 방법은 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X POST http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/<span class="string">'document name'</span>/_update -H <span class="string">'Content-type:application/json'</span> -d <span class="string">'&#123;"doc":&#123;"unit":1&#125;&#125;'</span></span><br><span class="line">$ curl -X POST http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/<span class="string">'document name'</span>/_update -H <span class="string">'Content-type:application/json'</span> -d <span class="string">'&#123;"script":"ctx._source.unit += 5"&#125;'</span></span><br></pre></td></tr></table></figure><p>데이터를 bulk로 저장하려면 json 파일에 index, type, id를 지정하여 데이터를 입력하여 저장한 후 다음 명령어를 통해 저장.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bulk.json</span><br><span class="line"></span><br><span class="line">&#123;<span class="attr">"index"</span>:&#123; <span class="attr">"_index"</span>:<span class="string">"classes"</span>,<span class="attr">"_type"</span>:<span class="string">"class"</span>,<span class="attr">"_id"</span>:<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="attr">"title"</span>:<span class="string">"algorithm"</span>,<span class="attr">"Professor"</span>:<span class="string">"john"</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:9200/_bulk --data-binary -H <span class="string">'Content-type:application/json'</span> -d @bulk.json</span><br></pre></td></tr></table></figure><h5 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h5><p>매핑없이 elastic search에 데이터를 넣을 수 있지만 매우 위험하다. 이유는 타입형에서도 혼선이 올 수 있으며,  Kibana로 시각화 할때 적절한 출력이 안될 수 있는 등 다양한 위험 요소가 존재 힌다. 따라서 데이터를 입력하기 전에 Mapping을 통해 자료형을 저장한 후 데이터를 입력.</p><p>데이터 관리시에는 매핑을 먼저 추가하고, 데이터가 이미 있을때는 매핑을 추후에 추가하여, 분석이나 시각화할때 도움이 될 수 있음.</p><p>Mapping 방법은 다음과 같다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mapping.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"class"</span> : &#123;</span><br><span class="line"><span class="attr">"properties"</span> : &#123;</span><br><span class="line"><span class="attr">"title"</span> : &#123;</span><br><span class="line"><span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"professor"</span> : &#123;</span><br><span class="line"><span class="attr">"type"</span> : <span class="string">"keyword"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X PUT http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/_mapping?include_type_name=<span class="literal">true</span>&amp;pretty -H <span class="string">'Content-type:application/json'</span> -d @mapping.json</span><br></pre></td></tr></table></figure><p>include_type_name=true가 없으면 illegal_argument_exception 에러가 발생하여 추가.</p><h5 id="Search"><a href="#Search" class="headerlink" title="Search"></a>Search</h5><p>전체 조회는 검색조건 없이 조회하면 되고, 검색 조건을 통한 방법은 url에서 query 파라미터를 추가 하는 방법과 request body를 추가하는 방법 존재.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/_search</span><br><span class="line">$ curl -X GET http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/_search?&amp;q=points:30 </span><br><span class="line">$ curl -X GET http://localhost:9200/<span class="string">'class name'</span>/<span class="string">'type name'</span>/_search -d <span class="string">'&#123;"query":&#123;"term":&#123;"points":30&#125;&#125;&#125;'</span> -H <span class="string">'Content-type:application/json'</span></span><br></pre></td></tr></table></figure><p>request body에는 여러가지 옵션이 존재함. 자세히 살펴보려면 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-body.html" target="_blank" rel="noopener">문서</a>를 확인.</p><h5 id="Aggregation"><a href="#Aggregation" class="headerlink" title="Aggregation"></a>Aggregation</h5><p> document 안에서 조합을 통해서 어떠한 값을 도출할때 쓰이는 방법을 Aggregation 이라한다. aggregation의 종류는 Bucketing, Metric, Matrix, Pipeline이 있으며, 구조는 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"aggregations"</span> : &#123;</span><br><span class="line"><span class="string">"&lt;aggregation_name&gt;"</span> : &#123;</span><br><span class="line"><span class="string">"&lt;aggregation_type&gt;"</span> : &#123;</span><br><span class="line">&#125;</span><br><span class="line">[,<span class="string">"meta"</span>:&#123;[&lt;meta_data_body&gt;]&#125;]?</span><br><span class="line">[,<span class="string">"aggregations"</span>:&#123;[&lt;sub_aggregation&gt;]+&#125;]&#125;]?</span><br><span class="line">&#125;</span><br><span class="line">[, <span class="string">"&lt;aggregation_name_2&gt;"</span>:&#123;...&#125;]*</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Bucketing</p><p>버킷을 작성하는 Aggregation으로, 각 버킷은 키 및 문서 기준과 연결.  Aggregation이 실행될 때 모든 버킷 기준이 컨텍스트의 모든 document에서 평가되고 기준이 일치하면 문서가 관련 버킷에 “fall in”한 것으로 간주. Aggregation  프로세스가 끝날 때마다 버킷 목록이 생김. 각 버킷에는 “belong”된 문서 세트 존재.</p></li><li><p>Metric</p><p>일련의 문서에서 메트릭을 추적하고 계산하는 Aggregation.</p></li><li><p>Matrix</p><p>여러 필드에서 작동하고 요청 된 문서 필드에서 추출 된 값을 기반으로 매트릭스 결과를 생성하는 Aggregation.</p></li><li><p>Pipeline</p><p>다른 집계 및 관련 메트릭의 결과를 집계하는 Aggregation </p></li></ul><p>하위 예제에서 사용할 document</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> basketball_mapping.json </span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"record"</span> : &#123;</span><br><span class="line"><span class="string">"properties"</span> : &#123;</span><br><span class="line"><span class="string">"team"</span> : &#123;</span><br><span class="line"><span class="string">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line"><span class="string">"fielddata"</span> : <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"name"</span> : &#123;</span><br><span class="line"><span class="string">"type"</span> : <span class="string">"text"</span>,</span><br><span class="line"><span class="string">"fielddata"</span> : <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"points"</span> : &#123;</span><br><span class="line"><span class="string">"type"</span> : <span class="string">"long"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"rebounds"</span> : &#123;</span><br><span class="line"><span class="string">"type"</span> : <span class="string">"long"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"assists"</span> : &#123;</span><br><span class="line"><span class="string">"type"</span> : <span class="string">"long"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"blocks"</span> : &#123;</span><br><span class="line"><span class="string">"type"</span> : <span class="string">"long"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"submit_date"</span> : &#123;</span><br><span class="line"><span class="string">"type"</span> : <span class="string">"date"</span>,</span><br><span class="line"><span class="string">"format"</span> : <span class="string">"yyyy-MM-dd"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">twoteam_basketball.json  </span><br><span class="line"></span><br><span class="line"> <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"1"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"team"</span> : <span class="string">"Chicago"</span>,<span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>, <span class="string">"points"</span> : 30,<span class="string">"rebounds"</span> : 3,<span class="string">"assists"</span> : 4, <span class="string">"blocks"</span> : 3, <span class="string">"submit_date"</span> : <span class="string">"1996-10-11"</span>&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"2"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"team"</span> : <span class="string">"Chicago"</span>,<span class="string">"name"</span> : <span class="string">"Michael Jordan"</span>,<span class="string">"points"</span> : 20,<span class="string">"rebounds"</span> : 5,<span class="string">"assists"</span> : 8, <span class="string">"blocks"</span> : 4, <span class="string">"submit_date"</span> : <span class="string">"1996-10-13"</span>&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"3"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"team"</span> : <span class="string">"LA"</span>,<span class="string">"name"</span> : <span class="string">"Kobe Bryant"</span>,<span class="string">"points"</span> : 30,<span class="string">"rebounds"</span> : 2,<span class="string">"assists"</span> : 8, <span class="string">"blocks"</span> : 5, <span class="string">"submit_date"</span> : <span class="string">"2014-10-13"</span>&#125;</span><br><span class="line">&#123; <span class="string">"index"</span> : &#123; <span class="string">"_index"</span> : <span class="string">"basketball"</span>, <span class="string">"_type"</span> : <span class="string">"record"</span>, <span class="string">"_id"</span> : <span class="string">"4"</span> &#125; &#125;</span><br><span class="line">&#123;<span class="string">"team"</span> : <span class="string">"LA"</span>,<span class="string">"name"</span> : <span class="string">"Kobe Bryant"</span>,<span class="string">"points"</span> : 40,<span class="string">"rebounds"</span> : 4,<span class="string">"assists"</span> : 8, <span class="string">"blocks"</span> : 6, <span class="string">"submit_date"</span> : <span class="string">"2014-11-13"</span>&#125;</span><br></pre></td></tr></table></figure><h5 id="Metric-Aggregation"><a href="#Metric-Aggregation" class="headerlink" title="Metric Aggregation"></a>Metric Aggregation</h5><p> document 안에서 조합을 통해서 어떠한 값을 도출할때 쓰이는 방법을 Aggregation 이라하고 그 중 최댓값, 최솟값, 평균값 등 산술관련한 연산이 필요할 경우 metric aggregations을 사용한다. 간단한 예로 최대, 최소, 평균값을 구하면 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">avg_metric.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"size"</span> : 0,</span><br><span class="line"><span class="string">"aggs"</span> : &#123;<span class="string">"avg_score"</span> : &#123; <span class="string">"avg"</span> : &#123; <span class="string">"field"</span> : <span class="string">"points"</span>&#125;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET http://localhost:9200/_search\?pretty -H <span class="string">'content-type:application/json'</span> --data-binary @avg_metric.json</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">min_metric.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"size"</span> : 0,</span><br><span class="line"><span class="string">"aggs"</span> : &#123;<span class="string">"avg_score"</span> : &#123; <span class="string">"min"</span> : &#123; <span class="string">"field"</span> : <span class="string">"points"</span>&#125;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET http://localhost:9200/_search\?pretty -H <span class="string">'content-type:application/json'</span> --data-binary @avg_metric.json</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">max_metric.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"size"</span> : 0,</span><br><span class="line"><span class="string">"aggs"</span> : &#123;<span class="string">"avg_score"</span> : &#123; <span class="string">"max"</span> : &#123; <span class="string">"field"</span> : <span class="string">"points"</span>&#125;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET http://localhost:9200/_search\?pretty -H <span class="string">'content-type:application/json'</span> --data-binary @maxcat st_metric.json</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">stats_metric.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"size"</span> : 0,</span><br><span class="line"><span class="string">"aggs"</span> : &#123;<span class="string">"avg_score"</span> : &#123; <span class="string">"stats"</span> : &#123; <span class="string">"field"</span> : <span class="string">"points"</span>&#125;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -X GET http://localhost:9200/_search\?pretty -H <span class="string">'content-type:application/json'</span> --data-binary @stats_metric.json</span><br></pre></td></tr></table></figure><p>metrics aggregation의 옵션들을 자세히 살펴보려면 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-metrics.html" target="_blank" rel="noopener">문서</a>를 확인.</p><h5 id="Bucket-Aggregation"><a href="#Bucket-Aggregation" class="headerlink" title="Bucket Aggregation"></a>Bucket Aggregation</h5><p>bucket aggregation은 group by의 개념과 흡사하다. 각 필드에서 값을 계산하지는 않지만 각 bucket은 키 및 document criterion과 연결하여 document bucket을 생성한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">terms_aggs.json </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"size"</span> : 0,</span><br><span class="line"><span class="string">"aggs"</span> : &#123;<span class="string">"players"</span> : &#123;<span class="string">"terms"</span> : &#123;<span class="string">"field"</span> : <span class="string">"team"</span>&#125;&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XGET http://localhost:9200/_search\?pretty -H <span class="string">'content-type:application/json'</span> --data-binary @terms_aggs.json</span><br></pre></td></tr></table></figure><p>bucket과 metric을 조합하면 특정 필드별 계산된 값을 얻을 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stats_by_team.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"size"</span> : 0,</span><br><span class="line"><span class="string">"aggs"</span> : &#123;</span><br><span class="line"><span class="string">"team_stats"</span> : &#123;</span><br><span class="line">    <span class="string">"terms"</span> : &#123;<span class="string">"field"</span> : <span class="string">"team"</span>&#125;,</span><br><span class="line"><span class="string">"aggs"</span> : &#123;</span><br><span class="line">    <span class="string">"stats_score"</span> : &#123;<span class="string">"stats"</span> : &#123;<span class="string">"field"</span> : <span class="string">"points"</span>&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -XGET http://localhost:9200/_search\?pretty -H <span class="string">'content-type:application/json'</span> --data-binary @stats_by_team.json</span><br></pre></td></tr></table></figure><p>bucket aggregation의 옵션들을 자세히 살펴보려면 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket.html" target="_blank" rel="noopener">문서</a>를 확인.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">Elastic Stack and Product Documentation</a></li><li><a href="https://github.com/minsuk-heo/BigData" target="_blank" rel="noopener">https://github.com/minsuk-heo/BigData</a></li></ul><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;elasticsearch란 아파치 Lucene 기반으로 개발한 오픈소스 검색엔진으로 많은 양의 데이터를 보관하고 실시간으로 분석할 수 있게 해준다. JSON 기반의 비정형 데이터 분산 검색과 분석을 지원하며, 다양한 기능을 플러그인 형태로 구현하여 적용할 수 있는 특징을 가진다. 본 문서에서는 설치 및 사용법(spring boot 연동)을 다룬다.&lt;br&gt;
    
    </summary>
    
      <category term="elasticsearch" scheme="http://yoursite.com/categories/elasticsearch/"/>
    
    
      <category term="elasticsearch" scheme="http://yoursite.com/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Spring 핵심 기술 (AOP)</title>
    <link href="http://yoursite.com/2019/02/25/spring-core-aop/"/>
    <id>http://yoursite.com/2019/02/25/spring-core-aop/</id>
    <published>2019-02-25T05:30:17.000Z</published>
    <updated>2021-04-12T05:32:47.747Z</updated>
    
    <content type="html"><![CDATA[<p>AOP 는 Aspect-oriendted Programming의 약자로 흩어진 Aspect를 모듈화 할 수 있는 프로그래밍 기법을 뜻하며, OOP를 보완하는 수단으로 사용된다.</p><a id="more"></a>  <h2 id="AOP-개념"><a href="#AOP-개념" class="headerlink" title="AOP 개념"></a>AOP 개념</h2><h3 id="AOP-주요-개념"><a href="#AOP-주요-개념" class="headerlink" title="AOP 주요 개념"></a>AOP 주요 개념</h3><ul><li>Aspect <ul><li>관점 지향적으로 모듈화된 모듈</li><li>Advice와 Pointcut을 담고 있음</li></ul></li><li>Target<ul><li>Advice가 적용되어지는 대상(class)</li></ul></li><li>Advice <ul><li>모듈에서 해야할 일을 정의</li></ul></li><li>Pointcut<ul><li>어떤 부분에 적용해야 하는지에 대한 정보</li></ul></li><li>Join point<ul><li>Target에 Advice가 실행되는 여러가지 합류 지점</li><li>생성자 호출직전, 생성자 호출이후, 필드에 접근하기전, 필드에서 값을 가져갔을 때 등</li></ul></li><li>AOP 구현체<ul><li><a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Aspect-oriented_programming</a></li><li>자바<ul><li>AspectJ</li><li>스프링 AOP</li></ul></li></ul></li></ul><h3 id="AOP-적용-방법"><a href="#AOP-적용-방법" class="headerlink" title="AOP 적용 방법"></a>AOP 적용 방법</h3><ul><li>컴파일 <ul><li>자바 파일을 클래스 파일로 만들때 조작된 바이트 코드를 생성하여 적용</li></ul></li><li>로드 타임<ul><li>JVM이 클래스를 로딩하는 시점에 추가하여 로딩(로드 타임 위빙)</li></ul></li><li>런타임<ul><li>JVM이 클래스를 로딩한 후 Bean을 생성할 때 해당 클래스의 프록시빈을 생성하여 적용</li></ul></li></ul><h2 id="스프링-AOP-프록시-기반-AOP"><a href="#스프링-AOP-프록시-기반-AOP" class="headerlink" title="스프링 AOP: 프록시 기반 AOP"></a>스프링 AOP: 프록시 기반 AOP</h2><h3 id="스프링-AOP-특징"><a href="#스프링-AOP-특징" class="headerlink" title="스프링 AOP 특징"></a>스프링 AOP 특징</h3><ul><li>프록시 기반의 AOP 구현체</li><li>스프링 빈에만 AOP를 적용 가능</li><li>모든 AOP 기능을 제공하는 것이 목적이 아니라, 스프링 IoC와 연동하여 엔터프라이즈 애플리케이션에서 가장 흔한 문제에 대한 해결책을 제공하는 것이 목적.</li></ul><h3 id="프록시-패턴-AOP"><a href="#프록시-패턴-AOP" class="headerlink" title="프록시 패턴 AOP"></a>프록시 패턴 AOP</h3><p>기존 코드 변경 없이 접근 제어 또는 부가 기능 추가하기 위해 프록시 패턴을 사용하여 AOP 구현</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createEvent</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEventService</span> <span class="keyword">implements</span> <span class="title">EventService</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Create an event"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Primary</span> <span class="comment">//@Primary를 통해 기본 Service로 사용</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxySimpleEventService</span> <span class="keyword">implements</span> <span class="title">EventService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SimpleEventService simpleEventService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        simpleEventService.createEvent();</span><br><span class="line">        System.out.println(System.currentTimeMillis() - begin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EventService eventService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        eventService.createEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>매번 프록시 클래스를 정의 해야하고 객체의 관계도 복잡한 문제 발생</li></ul><h2 id="스프링-AOP-AOP"><a href="#스프링-AOP-AOP" class="headerlink" title="스프링 AOP: @AOP"></a>스프링 AOP: @AOP</h2><p>스프링 IoC 컨테이너가 제공하는 기반 시설과 Dynamic 프록시를 사용하여 여러 복잡한 문제 해결</p><ul><li>동적 프록시: 동적으로 프록시 객체 생성하는 방법<ul><li>자바가 제공하는 방법은 인터페이스 기반 프록시 생성.</li><li>CGlib은 클래스 기반 프록시도 지원.</li></ul></li><li>스프링 IoC: 기존 빈을 대체하는 동적 프록시 빈을 만들어 등록<ul><li>클라이언트 코드 변경 없음.</li><li>AbstractAutoProxyCreator implements BeanPostProcessor</li></ul></li></ul><h3 id="애노테이션-기반의-스프링-AOP"><a href="#애노테이션-기반의-스프링-AOP" class="headerlink" title="애노테이션 기반의 스프링 @AOP"></a>애노테이션 기반의 스프링 @AOP</h3><ul><li><code>spring-boot-starter-aop</code> 의존성 추가하여 사용 가능</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>애스팩트 정의<ul><li>@Aspect 모듈 정의</li><li>빈으로 등록을 위해 (컴포넌트 스캔을 사용한다면) @Component 추가</li></ul></li><li>포인트컷 정의<ul><li>@Pointcut(표현식)</li><li>주요 표현식<ul><li>execution</li><li>@annotation</li><li>bean</li></ul></li><li>포인트컷 조합 가능 - &amp;&amp;, ||, !</li></ul></li><li>어드바이스 정의<ul><li>@Before </li><li>@AfterReturning</li><li>@AfterThrowing</li><li>@Around</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PerfLogging &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">perfAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"@annotation(PerfLogging)"</span>) <span class="comment">//@PerfLogging 가 붙은 클래스에 적용</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">logPerf</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        Object retVal = pjp.proceed();</span><br><span class="line">        System.out.println(System.currentTimeMillis() - begin);</span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"bean(simpleEventService)"</span>) <span class="comment">//simpleEventService로 등록된 빈이 실행되기전 호출</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEventService</span> <span class="keyword">implements</span> <span class="title">EventService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PerfLogging</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Create an event"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Delete an event"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    EventService eventService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        eventService.createEvent();</span><br><span class="line">        eventService.deleteEvent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">출력:</span><br><span class="line">Hello</span><br><span class="line">Create an event</span><br><span class="line">1003</span><br><span class="line"></span><br><span class="line">Hello</span><br><span class="line">Delete an event</span><br></pre></td></tr></table></figure><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AOP 는 Aspect-oriendted Programming의 약자로 흩어진 Aspect를 모듈화 할 수 있는 프로그래밍 기법을 뜻하며, OOP를 보완하는 수단으로 사용된다.&lt;/p&gt;
    
    </summary>
    
      <category term="Spring 핵심 기술" scheme="http://yoursite.com/categories/Spring-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="AOP" scheme="http://yoursite.com/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring 핵심 기술(데이터 바인딩)</title>
    <link href="http://yoursite.com/2019/01/25/spring-core-binding/"/>
    <id>http://yoursite.com/2019/01/25/spring-core-binding/</id>
    <published>2019-01-25T04:54:59.000Z</published>
    <updated>2021-04-12T05:32:47.747Z</updated>
    
    <content type="html"><![CDATA[<p>데이터바이딩이란 어떤 프로퍼티의 값을 타겟객체에 설정하는 것을 뜻한다. Spring 사용자 관점에서 보면 사용자가 입력한 값을 애플리케이션 도메인 객체에 동적으로 할당하는 기능다.  Spring에서는 사용자가 입력한 값은 문자열이고도메인 객체에 맞는 자료형으로 변경 필요하기 때문에 추상화 되었다.</p><a id="more"></a>  <h2 id="데이터-바인딩-추상화-PropertyEditor"><a href="#데이터-바인딩-추상화-PropertyEditor" class="headerlink" title="데이터 바인딩 추상화(PropertyEditor)"></a>데이터 바인딩 추상화(PropertyEditor)</h2><h3 id="구현체"><a href="#구현체" class="headerlink" title="구현체"></a>구현체</h3><ul><li>org.springframework.validation.DataBinder</li><li>java.beans.PropertyEditor</li></ul><h3 id="PropertyEditor-사용"><a href="#PropertyEditor-사용" class="headerlink" title="PropertyEditor 사용"></a>PropertyEditor 사용</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventEditor</span> <span class="keyword">extends</span> <span class="title">PropertyEditorSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAsText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Event event = (Event)getValue();</span><br><span class="line">        <span class="keyword">return</span> event.id.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">        setValue(<span class="keyword">new</span> Event(Integer.parseInt(text)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>스프링 3.0 이전까지 DataBinder가 변환 작업 사용하던 인터페이스</li><li>쓰레드-세이프 하지 않음 -&gt; controller 단에 등록하여 사용</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(WebDataBinder webDataBinder)</span></span>&#123;</span><br><span class="line">        webDataBinder.registerCustomEditor(Event<span class="class">.<span class="keyword">class</span>, <span class="title">new</span> <span class="title">EventEditor</span>())</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/event/&#123;event&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getEvent</span><span class="params">(@PathVariable Event event)</span></span>&#123;</span><br><span class="line">        System.out.println(event);</span><br><span class="line">        <span class="keyword">return</span> event.getId().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Object와 String 간의 변환만 할 수 있어, 사용 범위가 제한적 임.</li></ul><h2 id="데이터-바인딩-추상화-Converter-Formatter"><a href="#데이터-바인딩-추상화-Converter-Formatter" class="headerlink" title="데이터 바인딩 추상화(Converter, Formatter)"></a>데이터 바인딩 추상화(Converter, Formatter)</h2><h3 id="Converter"><a href="#Converter" class="headerlink" title="Converter"></a>Converter</h3><ul><li>S 타입을 T 타입으로 변환할 수 있는 매우 일반적인 변환기.</li><li>상태 정보 없음 (Stateless == 쓰레드세이프)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventConverter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToEventConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Event</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Event <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Event(Integer.parseInt(source));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EventToStringConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">Event</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">convert</span><span class="params">(Event source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> source.getId().toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ConverterRegistry 에 등록해서 사용</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> EventConverter.StringToEventConverter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h3><ul><li>PropertyEditor 대체제</li><li>Object와 String 간의 변환을 담당</li><li>문자열을 Locale에 따라 다국화하는 기능도 제공</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span>&lt;<span class="title">Event</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">parse</span><span class="params">(String text, Locale locale)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Event(Integer.parseInt(text));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">print</span><span class="params">(Event object, Locale locale)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> object.getId().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FormatterRegistry 에 등록해서 사용</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFormatters</span><span class="params">(FormatterRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addFormatter(<span class="keyword">new</span> EventFormatter());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Converter-Formatter-Bean-등록방법"><a href="#Converter-Formatter-Bean-등록방법" class="headerlink" title="Converter, Formatter Bean 등록방법"></a>Converter, Formatter Bean 등록방법</h3><ul><li>@Component 를 이용하여 등록</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventConverter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Component</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToEventConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">Event</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Event <span class="title">convert</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Event(Integer.parseInt(source));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventFormatter</span> <span class="keyword">implements</span> <span class="title">Formatter</span>&lt;<span class="title">Event</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Event <span class="title">parse</span><span class="params">(String text, Locale locale)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Event(Integer.parseInt(text));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ConversionService"><a href="#ConversionService" class="headerlink" title="ConversionService"></a>ConversionService</h3><ul><li>실제 변환 작업은 이 인터페이스를 통해서 쓰레드-세이프하게 사용 가능</li><li>스프링 MVC , 빈 (value) 설정, SpEL에서 사용</li><li>DefaultFormattingConversionService<ul><li>FormatterRegistry</li><li>ConversionService</li><li>여러 기본 컨버터, 포매터 자동 등록</li></ul></li><li>스프링 부트<ul><li>웹 애플리케이션인 경우에 DefaultFormattingConversionSerivce를 상속하여 만든<br>WebConversionService 를 빈으로 등록</li><li>Formatter와 Converter 빈을 찾아 자동 등록</li></ul></li><li>등록된 ConversionService들 조회</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ConversionService conversionService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(conversionService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ConversionService converters =</span><br><span class="line">@org.springframework.format.annotation.DateTimeFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.datetime.DateTimeFormatAnnotationFormatterFactory@3b95a6db,@org.springframework.format.annotation.NumberFormat java.lang.Long -&gt; java.lang.String: org.springframework.format.number.NumberFormatAnnotationFormatterFactory@309cedb6</span><br><span class="line">@org.springframework.format.annotation.DateTimeFormat java.time.LocalDate -&gt; java.lang.String: org.springframework.format.datetime.standard.Jsr310DateTimeFormatAnnotationFormatterFactory@36b9cb99,java.time.LocalDate -&gt; java.lang.String : org.springframework.format.datetime.standard.TemporalAccessorPrinter@4130955c</span><br><span class="line">@org.springframework.format.annotation.DateTimeFormat java.time.LocalDateTime -&gt; </span><br><span class="line">.....</span><br></pre></td></tr></table></figure><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;데이터바이딩이란 어떤 프로퍼티의 값을 타겟객체에 설정하는 것을 뜻한다. Spring 사용자 관점에서 보면 사용자가 입력한 값을 애플리케이션 도메인 객체에 동적으로 할당하는 기능다.  Spring에서는 사용자가 입력한 값은 문자열이고도메인 객체에 맞는 자료형으로 변경 필요하기 때문에 추상화 되었다.&lt;/p&gt;
    
    </summary>
    
      <category term="Spring 핵심 기술" scheme="http://yoursite.com/categories/Spring-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="data binding" scheme="http://yoursite.com/tags/data-binding/"/>
    
      <category term="DataBinder" scheme="http://yoursite.com/tags/DataBinder/"/>
    
  </entry>
  
  <entry>
    <title>Spring 핵심 기술 (validation 추상화)</title>
    <link href="http://yoursite.com/2019/01/20/spring-core-validation/"/>
    <id>http://yoursite.com/2019/01/20/spring-core-validation/</id>
    <published>2019-01-20T11:34:52.000Z</published>
    <updated>2021-04-12T05:32:47.748Z</updated>
    
    <content type="html"><![CDATA[<p>애플리케이션에서 사용하는 객체 검증용 인터페이스로 org.springframework.validation.Validator 로 추상화하였다. 웹이, 서비스, 데이터 어떤 계층과도 관계없이 사용할 수 있다. 구현체 중 하나로, JSR-303(Bean Validation 1.0)과 JSR-349(Bean Validation 1.1)을 지원(LocalValidatorFactoryBean)하며,  DataBinder에 들어가 바인딩 할 때 같이 사용 가능하다.</p><a id="more"></a>  <h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><ul><li>boolean supports(Class clazz): 어떤 타입의 객체를 검증할 때 사용할 것인지 결정</li><li>void validate(Object obj, Errors e): 실제 검증 로직을 이 안에서 구현 <ul><li>구현할 때 ValidationUtils 사용하며 편리 함. </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EventValidator</span> <span class="keyword">implements</span> <span class="title">Validator</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Event<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">clazz</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(Object target, Errors errors)</span> </span>&#123;</span><br><span class="line">        ValidationUtils.rejectIfEmptyOrWhitespace(errors, <span class="string">"title"</span>, <span class="string">"notempty"</span>, <span class="string">"Empty title is not allowed."</span>);</span><br><span class="line">        Event event = (Event) target;</span><br><span class="line">        <span class="keyword">if</span>(event.getTitle() ==<span class="keyword">null</span>)&#123;</span><br><span class="line">            errors.reject(<span class="string">"title"</span>, <span class="string">"Empty title is not allowed."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Event event = <span class="keyword">new</span> Event();</span><br><span class="line">        EventValidator eventValidator = <span class="keyword">new</span> EventValidator();</span><br><span class="line">        Errors errors = <span class="keyword">new</span> BeanPropertyBindingResult(event, <span class="string">"event"</span>);</span><br><span class="line"></span><br><span class="line">        eventValidator.validate(event, errors);</span><br><span class="line">        System.out.println(errors.hasErrors());</span><br><span class="line">        errors.getAllErrors().forEach(e -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">" ===== error code ===="</span>);</span><br><span class="line">            Arrays.stream(e.getCodes()).forEach(System.out::println);</span><br><span class="line">            System.out.println(e.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="스프링-부트-2-0-5-이상-버전을-사용할-때"><a href="#스프링-부트-2-0-5-이상-버전을-사용할-때" class="headerlink" title="스프링 부트 2.0.5 이상 버전을 사용할 때"></a>스프링 부트 2.0.5 이상 버전을 사용할 때</h2><ul><li>LocalValidatorFactoryBean 빈으로 자동 등록 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"defaultValidator"</span>)</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(validator.getClass());</span><br><span class="line"></span><br><span class="line">        Event event = <span class="keyword">new</span> Event();</span><br><span class="line">        event.setLimit(-<span class="number">1</span>);</span><br><span class="line">        event.setEmail(<span class="string">"hsoh"</span>);</span><br><span class="line"></span><br><span class="line">        Errors errors = <span class="keyword">new</span> BeanPropertyBindingResult(event, <span class="string">"event"</span>);</span><br><span class="line"></span><br><span class="line">        validator.validate(event, errors);</span><br><span class="line">        System.out.println(errors.hasErrors());</span><br><span class="line">        errors.getAllErrors().forEach(e -&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">" ===== error code ===="</span>);</span><br><span class="line">            Arrays.stream(e.getCodes()).forEach(System.out::println);</span><br><span class="line">            System.out.println(e.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JSR-380(Bean Validation 2.0.1) 구현체로 hibernate-validator 사용. </li><li><a href="https://beanvalidation.org/" target="_blank" rel="noopener">https://beanvalidation.org/</a> </li></ul><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;애플리케이션에서 사용하는 객체 검증용 인터페이스로 org.springframework.validation.Validator 로 추상화하였다. 웹이, 서비스, 데이터 어떤 계층과도 관계없이 사용할 수 있다. 구현체 중 하나로, JSR-303(Bean Validation 1.0)과 JSR-349(Bean Validation 1.1)을 지원(LocalValidatorFactoryBean)하며,  DataBinder에 들어가 바인딩 할 때 같이 사용 가능하다.&lt;/p&gt;
    
    </summary>
    
      <category term="Spring 핵심 기술" scheme="http://yoursite.com/categories/Spring-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="validation" scheme="http://yoursite.com/tags/validation/"/>
    
  </entry>
  
  <entry>
    <title>Electron + Vue.js 애플리케이션 만들기</title>
    <link href="http://yoursite.com/2019/01/19/electron-vue-tutorial/"/>
    <id>http://yoursite.com/2019/01/19/electron-vue-tutorial/</id>
    <published>2019-01-19T10:46:04.000Z</published>
    <updated>2021-04-12T05:32:47.735Z</updated>
    
    <content type="html"><![CDATA[<p>ELectron을 사용한 애플리케이션을 만들경우 사용자에게 보여지는 GUI(Renderer)를 Vue.js  를 이용하여 구현할 수 있다. Electron에 대한 설명은 <a href="https://hsoh1990.github.io/2019/01/18/electron-tutorial/" target="_blank" rel="noopener">Electron 애플리케이션 만들기</a>를 참고하고 <a href="https://kr.vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">Vue.js</a>를 참고 하면 된다.</p><a id="more"></a>  <p><strong>Table of Contents</strong></p><ul><li><a href="#Quick-start">Quick start</a></li><li><a href="#Project-Structure">Project Structure</a></li><li><a href="#NPM-Scripts">NPM Scripts</a></li><li><a href="#Reference">Reference</a></li><li><a href="#Contributors">Contributors</a></li></ul><p>vue로 구축 된 electron 애플리케이션을 만들기 위한 보일러 플레이트는 <a href="https://github.com/SimulatedGREG/electron-vue/tree/master/docs/ko" target="_blank" rel="noopener">electron-vue</a>를 사용한다. electron-vue은 스캐폴딩을 위한 <code>vue-cli</code>, <code>vue-loader</code>이 있는 <code>webpack</code>, <code>electron-packager</code>, <code>electron-builder</code>, <code>vue-router</code>, <code>vuex</code> 등과 같이 가장 많이 사용되는 플러그인을 사용한다.</p><h2 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vue-cli와 스캐폴딩 보일러 플레이트 설치</span></span><br><span class="line">$ npm install -g vue-cli</span><br><span class="line">$ vue init simulatedgreg/electron-vue my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 의존성 설치 및 개발자 모드로 실행</span></span><br><span class="line">$ <span class="built_in">cd</span> my-project</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><h2 id="Project-Structure"><a href="#Project-Structure" class="headerlink" title="Project Structure"></a>Project Structure</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">my-project</span><br><span class="line">├─ .electron-vue</span><br><span class="line">│  └─ &lt;build/development&gt;.js files</span><br><span class="line">├─ build</span><br><span class="line">│  └─ icons/</span><br><span class="line">├─ dist</span><br><span class="line">│  ├─ electron/</span><br><span class="line">│  └─ web/</span><br><span class="line">├─ node_modules/</span><br><span class="line">├─ src</span><br><span class="line">│  ├─ main</span><br><span class="line">│  │  ├─ index.dev.js</span><br><span class="line">│  │  └─ index.js</span><br><span class="line">│  ├─ renderer</span><br><span class="line">│  │  ├─ components/</span><br><span class="line">│  │  ├─ router/</span><br><span class="line">│  │  ├─ store/</span><br><span class="line">│  │  ├─ App.vue</span><br><span class="line">│  │  └─ main.js</span><br><span class="line">│  └─ index.ejs</span><br><span class="line">├─ static/</span><br><span class="line">├─ test</span><br><span class="line">│  ├─ e2e</span><br><span class="line">│  │  ├─ specs/</span><br><span class="line">│  │  ├─ index.js</span><br><span class="line">│  │  └─ utils.js</span><br><span class="line">│  ├─ unit</span><br><span class="line">│  │  ├─ specs/</span><br><span class="line">│  │  ├─ index.js</span><br><span class="line">│  │  └─ karma.config.js</span><br><span class="line">│  └─ .eslintrc</span><br><span class="line">├─ .babelrc</span><br><span class="line">├─ .eslintignore</span><br><span class="line">├─ .eslintrc.js</span><br><span class="line">├─ .gitignore</span><br><span class="line">├─ package.json</span><br><span class="line">└─ README.md</span><br></pre></td></tr></table></figure><ul><li>src<ul><li><code>main</code> 프로세스 코드로 electron을 구동에 필요한 코드 정의</li><li><code>renderer</code> 프로세스 코드로 vue.js 기반의 코드를 작성(cli로 설치시 기본 모듈을 정의되어 있음)</li></ul></li><li>static<ul><li><code>main</code>, <code>renderer</code> 각 프로세스가 소비 할 수 있는 Static assets을 배치</li><li><code>renderer</code> 에서는 <code>static/imgs/some.png</code> 디렉토리로 검색</li><li><code>main</code>에서는  <code>path.join(__static, &#39;/somePath..&#39;)</code>로 디렉토리 검색</li></ul></li><li>test<ul><li>electron-vue는 유닛 테스트를 위해 <a href="https://karma-runner.github.io/1.0/index.html" target="_blank" rel="noopener">Karma</a> 테스트 러너, <a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a> 테스트 프레임워크를 사용</li><li>electron-vue는 엔드 투 엔드 테스트를 위해 <a href="http://electron.atom.io/spectron/" target="_blank" rel="noopener">Spectron</a> 과 <a href="https://mochajs.org/" target="_blank" rel="noopener">Mocha</a> 테스트 프레임 워크를 사용</li></ul></li></ul><h2 id="NPM-Scripts"><a href="#NPM-Scripts" class="headerlink" title="NPM Scripts"></a>NPM Scripts</h2><ul><li><code>npm run build</code> -&gt; 프로덕션과 패키지 용 앱을 빌드(<a href="https://simulatedgreg.gitbooks.io/electron-vue/content/ko/building_your_app.html" target="_blank" rel="noopener"><strong>Building Your App</strong></a>)</li><li><code>npm run dev</code> -&gt; 현재 프로젝트를 개발용으로 실행</li><li><code>npm run lint</code> -&gt; 모든 <code>src/</code>와 <code>test/</code>의 JS &amp; Vue component 파일을 Lint </li><li><code>npm run lint:fix</code> -&gt; 모든 <code>src/</code>와 <code>test/</code>의 JS &amp; Vue component 파일을 Lint하고 문재 해결을 시도</li><li><code>npm run pack</code> -&gt; <code>npm run pack:main</code> &amp; <code>npm run pack:renderer</code> 둘 다 실행</li><li><code>npm run pack:main</code>  -&gt; <code>main</code> 프로세스 소스 코드를 번들</li><li><code>npm run pack:renderer</code> -&gt;  <code>renderer</code> 프로세스 소스 코드를 번들</li><li><code>npm run unit</code>  -&gt; Karma와 Jasmine로 단위 테스트를 실행 (<a href="https://simulatedgreg.gitbooks.io/electron-vue/content/ko/unittesting.html" target="_blank" rel="noopener"><strong>Unit Testing</strong></a>)</li><li><code>npm run e2e</code> -&gt; Spectron + Mocha로 end-to-end 테스트를 실행(<a href="https://simulatedgreg.gitbooks.io/electron-vue/content/ko/end-to-end_testing.html" target="_blank" rel="noopener"><strong>End-to-end Testing</strong></a>)</li><li><code>npm test</code> -&gt; <code>npm run unit</code> &amp; <code>npm run e2e</code> 둘 다 실행(<a href="https://simulatedgreg.gitbooks.io/electron-vue/content/ko/testing.html" target="_blank" rel="noopener">Testing**</a>)</li><li></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://electronjs.org/docs" target="_blank" rel="noopener">https://electronjs.org/docs</a></li><li><a href="https://kr.vuejs.org/v2/guide/index.html" target="_blank" rel="noopener">https://kr.vuejs.org/v2/guide/index.html</a></li><li><a href="https://github.com/SimulatedGREG/electron-vue/tree/master/docs/ko" target="_blank" rel="noopener">https://github.com/SimulatedGREG/electron-vue/tree/master/docs/ko</a></li><li><a href="https://simulatedgreg.gitbooks.io/electron-vue/content/ko/getting_started.html" target="_blank" rel="noopener">https://simulatedgreg.gitbooks.io/electron-vue/content/ko/getting_started.html</a></li></ul><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ELectron을 사용한 애플리케이션을 만들경우 사용자에게 보여지는 GUI(Renderer)를 Vue.js  를 이용하여 구현할 수 있다. Electron에 대한 설명은 &lt;a href=&quot;https://hsoh1990.github.io/2019/01/18/electron-tutorial/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Electron 애플리케이션 만들기&lt;/a&gt;를 참고하고 &lt;a href=&quot;https://kr.vuejs.org/v2/guide/index.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue.js&lt;/a&gt;를 참고 하면 된다.&lt;/p&gt;
    
    </summary>
    
      <category term="electron 튜토리얼" scheme="http://yoursite.com/categories/electron-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
      <category term="electron" scheme="http://yoursite.com/tags/electron/"/>
    
      <category term="Vue.js" scheme="http://yoursite.com/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Electron 애플리케이션 만들기</title>
    <link href="http://yoursite.com/2019/01/18/electron-tutorial/"/>
    <id>http://yoursite.com/2019/01/18/electron-tutorial/</id>
    <published>2019-01-18T14:40:00.000Z</published>
    <updated>2021-04-12T05:32:47.734Z</updated>
    
    <content type="html"><![CDATA[<p>Electron는 GitHub에서 HTML, CSS 및 JavaScript를 사용하여 데스크톱 응용 프로그램을 개발하기 위해<br>개발된 오픈 소스 라이브러리다. Electron 은 Chromium과 Node.js를 단일 실행으로 합치고 앱을<br>Mac, Windows 와 Linux 용으로 패키지화 하여 사용가능하게 한다.</p><a id="more"></a>  <h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a><strong>Table of Contents</strong></h2><ul><li><a href="#Quick-start">Quick start</a></li><li><a href="#Inter-process-communication">Inter process communication</a></li><li><a href="#Using-node-modules">Usingu node modules</a></li><li><a href="#Application-Packaging">Application Packaging</a></li><li><a href="#Reference">Reference</a></li><li><a href="#Contributors">Contributors</a></li></ul><ul><li>Electron 구조<br><img src="./image/electron-tutorial-structure.JPG" alt="Image"></li></ul><h3 id="main-process"><a href="#main-process" class="headerlink" title="main process"></a>main process</h3><p>Electron이 실행될 때 Node.js가 실행되는 부분을 main process라고 한다. main process는 새창을<br>생성하거나 윈도우, 맥, 리녹스의 네이티브 GUI를 조작할 수 있으며, Node.js에서 사용하는 모듈을 사용할 수 있다.<br><br></p><h3 id="renderer-process"><a href="#renderer-process" class="headerlink" title="renderer process"></a>renderer process</h3><p>사용자에게 보여지는 GUI를 구성할 때 작동하는 웹페이지를 renderer process라고 한다. renderer process는<br>네이티브 리소스에 접근할 수 없으며, 크로미움을 사용하여 사용자에게 보여주는 화면을 구성한다.<br><br><br>하나의 main process에서 다수의 renderer process를 관리하며, renderer process는 각각이 독립적으로 작동하고<br>단일 페이지의 작동에만 영향을 준다. Electron의 BrowserWindow 클래스를 통해 main process에서 redererperocess를<br>생성할 수 있다. BrowserWindow 클래스를 통해 생성된 인스턴스가 소멸할 때 renderer process도 같이 소멸된다.</p><h2 id="Quick-start"><a href="#Quick-start" class="headerlink" title="Quick start"></a>Quick start</h2><ul><li>먼저 Electron 모듈을 설치한다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm init -y</span><br><span class="line">$ npm install electron --save-dev --save-exact</span><br><span class="line">$ npm install electron -g</span><br></pre></td></tr></table></figure><ul><li>github에서 제공하는 electron-quick-start를 사용해도 된다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/electron/electron-quick-start</span><br><span class="line">$ <span class="built_in">cd</span> electron-quick-start</span><br><span class="line">$ npm install</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure><ul><li>main.js 생성 후 BrowserWindow 클래스를 통해 인스턴스 생성</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;app, BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//윈도우 객체의 전역으로 선언합니다. 그렇지 않으면 윈도우가 자동으로 닫는다.</span></span><br><span class="line"><span class="comment">//자바 스크립트 객체가 가비지 수집 될 때 자동으로 닫는다.</span></span><br><span class="line"><span class="keyword">let</span> win</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 브라우저 창을 만듭니다.</span></span><br><span class="line">  win = <span class="keyword">new</span> BrowserWindow(&#123;<span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//index.html를 로드합니다.</span></span><br><span class="line">  win.loadURL(url.format(&#123;</span><br><span class="line">    pathname: path.join(__dirname, <span class="string">'index.html'</span>),</span><br><span class="line">    protocol: <span class="string">'file:'</span>,</span><br><span class="line">    slashes: <span class="literal">true</span></span><br><span class="line">  &#125;))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 개발툴을 사용하기 위해 오픈한다.</span></span><br><span class="line">  win.webContents.openDevTools()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 윈도우가 닫힐 때 발생되는 이벤트다.</span></span><br><span class="line">  win.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">    win = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//사용 준비가 완료되면 윈도우를 연다.</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, createWindow)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 모든 창이 닫히면 종료한다.</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// macOS에서 독 아이콘이 클릭되고 다른 창은 열리지 않는다.</span></span><br><span class="line">  <span class="keyword">if</span> (win === <span class="literal">null</span>) &#123;</span><br><span class="line">    createWindow()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>renderer process에서  표시하려는 웹페이지(index.html)를 만든다.</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello Electron<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Electron!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Electron App 실행</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./node_modules/.bin/electron main.js</span><br><span class="line">$ electron main.js</span><br></pre></td></tr></table></figure><h2 id="Inter-process-communication"><a href="#Inter-process-communication" class="headerlink" title="Inter process communication"></a>Inter process communication</h2><p>electron 실행시 main, renderer 두개의 프로세스가 동작한다. electron에서는 main과 renderer는 비동기 통신을 지원하며, 통신 모듈은<br>ipcMain, ipcRenderer, remote가 있다.<br>ipcMain, ipcRenderer 모듈은 EventEmitter 클래스의 확장 인스턴스로 main 프로세스를 사용할 떄 renderer 프로세스가 보내닌 메시지를 동기/비동기로 처리한다.</p><ul><li>EventEmitter<br>EventEmitter는 Node.js에서 지원하는 모듈로 이벤트를 등록하고 등록된 메시지를 통해 이벤트를 받는다.<br>예시는 다음과 같다.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> EventEmitter();</span><br><span class="line"></span><br><span class="line"><span class="comment">//message가 event인 이벤트를 등록한다.</span></span><br><span class="line">myEmitter.on(<span class="string">'event'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'A'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//message가 event인 이벤트를 발생한다.</span></span><br><span class="line">myEmitter.emit(<span class="string">'event'</span>);</span><br></pre></td></tr></table></figure><p>자세한 내용은 <a href="https://nodejs.org/api/events.html#events_class_eventemitter" target="_blank" rel="noopener">EventEmitter</a>를 참조한다.</p><h3 id="ipcMain"><a href="#ipcMain" class="headerlink" title="ipcMain"></a>ipcMain</h3><ul><li>메시지를 보낼 때 이벤트 이름은 channel이다.</li><li>동기 메시지에 회신 하려면 event.returnValue를 설정 해야한다.</li><li>비동기 메시지를 다시 보낸 사람에 게 보내려면 event.sender.send(…)를 사용할 수 있다.</li></ul><p>main process에서 사용은 다음과 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ipcMain&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line">ipcMain.on(<span class="string">'asynchronous-message'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg)  <span class="comment">// arg 내용이 출력된다.</span></span><br><span class="line">  event.sender.send(<span class="string">'asynchronous-reply'</span>, <span class="string">'pong'</span>) <span class="comment">// 비동기 메시지를 전송한다.</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ipcMain.on(<span class="string">'synchronous-message'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg)  <span class="comment">// arg 내용이 출력된다.</span></span><br><span class="line">  event.returnValue = <span class="string">'pong'</span> <span class="comment">// 동기 메시지를 전송한다.</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ipcMain 모듈은 이벤트를 처리하기 위해 다음의 메소드를 가진다.</p><ul><li>ipcMain.on(channel, listener)<br>channel(String)을 수신하고 새로운 메시지가 도착하면 listener(Function)를 호출한다.</li><li>ipcMain.once(channel, listener)<br>일회성 channel(String)을 생성하고 새로운 메시지가 도착하면 listener(Function)를 호출 후 이벤트를 제거한다.</li><li>ipcMain.removeListener(channel, listener)<br>channel(String)에 대한 listener(Function)를 제거한다.<br>-ipcMain.removeAllListeners([channel])<br>지정한 channel(String)의 listener(Function)들을 전부 제거합니다.</li></ul><h3 id="ipcRenderer"><a href="#ipcRenderer" class="headerlink" title="ipcRenderer"></a>ipcRenderer</h3><p>rederer process에서 사용은 다음과 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ipcRenderer&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line">ipcRenderer.send(<span class="string">'asynchronous-message'</span>, <span class="string">'ping'</span>)</span><br><span class="line"></span><br><span class="line">ipcRenderer.on(<span class="string">'asynchronous-reply'</span>, (arg) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg) <span class="comment">// "pong" 출력</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>대부분의 메소드는 ipcMain과 비슷하다.<br>다음 ipc 통신을 통해 main, renderer 프로세스간의 통신은 ./communication/*.js를 통헤 등록해보고<br>index.html에서 버튼은 생성해 이벤트를 발생시켜 확인한다.</p><h2 id="Using-node-modules"><a href="#Using-node-modules" class="headerlink" title="Using node modules"></a>Using node modules</h2><p>electron에서는 main 프로세스를 통해 npm에서 제공한는 node 모듈을 사용할 수 있다.<br>사용방법은 node.js에서 사용하는 것과 동일하게 npm을 통해 다운 받고 mamin 프로세스에서 모듈을 가져와 사용한다.<br>이번에는 serialport 모둘을 사용하여 현재 연결된 장치 정보를 가져오도록 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install serialport --save</span><br><span class="line">$ npm install --save-dev electron-rebuild</span><br><span class="line">$ ./node_modules/.bin/serialport-list -f json</span><br></pre></td></tr></table></figure><p>설치가 완료되면 serialport-list모듈을 통해 현재 연결된 장치의 정보를 가져올 수 있다. 다음을 js에서 코딩하면 다음과 같다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SerialPort = <span class="built_in">require</span>(<span class="string">'serialport'</span>);</span><br><span class="line"></span><br><span class="line">SerialPort.list(<span class="function"><span class="keyword">function</span> (<span class="params">err, ports</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(ports);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>콘솔로 출력해본 데이터를 ipc 통신을 통해 데이터를 요청하고 html에서 리스트를 보도록 해본다.</p><ul><li>renderer 프로세스에서 버튼를 만들어 해당 데이터를 요청한다.</li></ul><figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"reqDevice()"</span>&gt;</span>request Device List!<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>index.html</p><figure class="highlight javascript"><figcaption><span>ipcRendererClass.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reqDevice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">ipcRenderer.send(<span class="string">'reqDevice'</span>, <span class="string">'any'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ipcRendererClass.js</p><ul><li>main 프로세스에서 요청을 받아 serialport모듈을 사용해 데이터를 가져온다</li><li>main 프로세스에서 renderer프로세스로 값을 전달한다.</li></ul><figure class="highlight javascript"><figcaption><span>ipcMainClass.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ipcMain.on(<span class="string">'reqDevice'</span>, (event, arg) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">    thisClass.getDeviceList().then(<span class="function"><span class="keyword">function</span> (<span class="params">deviceList</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(deviceList);</span><br><span class="line">event.sender.send(<span class="string">'respDevice'</span>, deviceList)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>ipcMainClass.js</p><ul><li>화면에 데이터를 보여준다.</li></ul><figure class="highlight javascript"><figcaption><span>ipcMainClass.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ipcRenderer.on(<span class="string">'respDevice'</span>, (event, args) =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(args);</span><br><span class="line">jQuery(<span class="string">'#deviceList'</span>).empty()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> element <span class="keyword">of</span> args) &#123;</span><br><span class="line">jQuery(<span class="string">'#deviceList'</span>).append(<span class="string">'&lt;li&gt;'</span> + element.comName +<span class="string">'&lt;/li&gt;'</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>ipcRendererClass.js</p><h2 id="Application-Packaging"><a href="#Application-Packaging" class="headerlink" title="Application Packaging"></a>Application Packaging</h2><p>Electron으로 만든 앱을 배포하기 위해서는 앱을 Packaging후 깔끔하게 installer 파일로 빌드하여 배포하는게 해야한다.<br>여기서는 기본적인 Packaging방법을 설명한다. Packaging은 electron-packager 모듈을 통해 각 OS에 따라서 빌드할 수 있다.</p><p>먼저 모듈을 글로벌로 설치해야 한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install electron-packager --save-dev</span><br><span class="line">$ npm install electron-packager -g</span><br></pre></td></tr></table></figure><p>다음 빌드를 하기위해서는 package.json을 수정해야한다.<br>여기서 main.js의 위치를 제대로 추가하지 않으면 빌드에 성공해도 실행이 되지 않을 수 있으니 주의해야한다.</p><p>다음 package.json에 script를 추가한다</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  . . . .</span><br><span class="line">  "build": "electron-packager . AppName  --out=dist --asar --overwrite --all",</span><br><span class="line">      "build-osx": "electron-packager . AppName --platform=darwin --arch=all --icon=./assets/icon.icns --out ./dist --overwrite --asar",</span><br><span class="line">      "build-linux": "electron-packager . AppName --platform linux --arch=all --out ./dist --overwrite --asar",</span><br><span class="line">      "build-win32": "electron-packager . AppName --platform win32 --arch=ia32 --out ./dist --overwrite --asar",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자신의 OS에 따라 스크립트를 실행한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build-osx</span><br></pre></td></tr></table></figure><p>installer는 각 OS별 모듈이 따로 있으며, 사용방법은 모듈별로 따로 참고해야 한다.<br>mac OS에서 사용할 수 있도록 .dmg로 만드는 방법은 다음과 같다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install electron-installer-dmg --save-dev</span><br><span class="line">$ npm install electron-installer-dmg -g</span><br></pre></td></tr></table></figure><p>다음 package.json에 script를 추가한다</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  . . . .</span><br><span class="line">  "installer-mac": "electron-installer-dmg ./dist/AppName-darwin-x64/AppName.app serial-list --out=dist --icon=assets/icon.icns --overwrite"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>빌드가 완료되면 dmg파일이 생성되고 이를 통해 배포하면 된다.</p><p>참고 - windows 경우 electron-installer-squirrel-windows를 사용한다.</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://electronjs.org/docs" target="_blank" rel="noopener">https://electronjs.org/docs</a></li><li><a href="https://www.slideshare.net/deview/123-electron" target="_blank" rel="noopener">https://www.slideshare.net/deview/123-electron</a></li><li><a href="https://nodejs.org/api/events.html" target="_blank" rel="noopener">https://nodejs.org/api/events.html</a></li></ul><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Electron는 GitHub에서 HTML, CSS 및 JavaScript를 사용하여 데스크톱 응용 프로그램을 개발하기 위해&lt;br&gt;개발된 오픈 소스 라이브러리다. Electron 은 Chromium과 Node.js를 단일 실행으로 합치고 앱을&lt;br&gt;Mac, Windows 와 Linux 용으로 패키지화 하여 사용가능하게 한다.&lt;/p&gt;
    
    </summary>
    
      <category term="electron" scheme="http://yoursite.com/categories/electron/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
      <category term="electron" scheme="http://yoursite.com/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>Spring 핵심 기술 (Resource 추상화)</title>
    <link href="http://yoursite.com/2019/01/16/spring-core-resource/"/>
    <id>http://yoursite.com/2019/01/16/spring-core-resource/</id>
    <published>2019-01-16T12:36:32.000Z</published>
    <updated>2021-04-12T05:32:47.747Z</updated>
    
    <content type="html"><![CDATA[<p>java.net.URL을 org.springframework.core.io.Resource로 감싸 추상화 한 것으로 클래스패스 기준으로 리소스 읽어오는 기능 부재, ServletContext를 기준으로 상대 경로로 읽어오는 기능 부재, 새로운 핸들러를 등록하여 특별한 URL 접미사를 만들어 사용할 수는 있지만 구현이 복잡하고 편의성 메소드가 부족하여 추상화하였다. </p><a id="more"></a>  <h2 id="인터페이스"><a href="#인터페이스" class="headerlink" title="인터페이스"></a>인터페이스</h2><ul><li>Resource extends InputStreamSource</li><li>getInputStream() </li><li>exitst() : 리소스가 존재하는지 확인</li><li>isReadable() : 리소스를 읽을 수 있는지 확인</li><li>isFile() : 리소스가 파일인지 확인</li><li>isOpen() : 리소스가 열려있는지 확인</li><li>getDescription() : 전체 경로 포함한 파일 이름 또는 실제 URL </li><li>…</li></ul><h2 id="구현체"><a href="#구현체" class="headerlink" title="구현체"></a>구현체</h2><ul><li>UrlResource: java.net.URL 참고, 기본으로 지원하는 프로토콜 http, https, ftp, file, jar. </li><li>ClassPathResource: 지원하는 접두어 classpath: </li><li>FileSystemResource </li><li>ServletContextResource: 웹 애플리케이션 루트에서 상대 경로로 리소스 찾는다. </li><li>… </li></ul><h2 id="리소스-읽어오기"><a href="#리소스-읽어오기" class="headerlink" title="리소스 읽어오기"></a>리소스 읽어오기</h2><ul><li>Resource의 타입은 locaion 문자열과 ApplicationContext의 타입에 따라 결정<ul><li>ClassPathXmlApplicationContext -&gt; ClassPathResource</li><li>FileSystemXmlApplicationContext -&gt; FileSystemResource</li><li>WebApplicationContext -&gt; ServletContextResource </li></ul></li><li>ApplicationContext의 타입에 상관없이 리소스 타입을 강제하려면 java.net.URL 접두어(+ classpath:)중 하나를 사용 가능<ul><li>classpath:me/whiteship/config.xml -&gt; ClassPathResource </li><li>file:///some/resource/path/config.xml -&gt; FileSystemResource </li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(resourceLoader.getClass());</span><br><span class="line"></span><br><span class="line">        Resource resource = resourceLoader.getResource(<span class="string">"classpath:text.txt"</span>);</span><br><span class="line">        System.out.println(resource.getClass());</span><br><span class="line"></span><br><span class="line">        System.out.println(resource.exists());</span><br><span class="line">        System.out.println(resource.getDescription());</span><br><span class="line">        Files.lines(Paths.get(resource.getURI())).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;java.net.URL을 org.springframework.core.io.Resource로 감싸 추상화 한 것으로 클래스패스 기준으로 리소스 읽어오는 기능 부재, ServletContext를 기준으로 상대 경로로 읽어오는 기능 부재, 새로운 핸들러를 등록하여 특별한 URL 접미사를 만들어 사용할 수는 있지만 구현이 복잡하고 편의성 메소드가 부족하여 추상화하였다. &lt;/p&gt;
    
    </summary>
    
      <category term="Spring 핵심 기술" scheme="http://yoursite.com/categories/Spring-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="Resource" scheme="http://yoursite.com/tags/Resource/"/>
    
  </entry>
  
  <entry>
    <title>Spring 핵심 기술 (IoC, Bean - 02)</title>
    <link href="http://yoursite.com/2019/01/06/spring-core-ioc-02/"/>
    <id>http://yoursite.com/2019/01/06/spring-core-ioc-02/</id>
    <published>2019-01-06T02:30:00.000Z</published>
    <updated>2021-04-12T05:32:47.747Z</updated>
    
    <content type="html"><![CDATA[<p>Environment는 프로파일과 프로퍼티를 다루는 인터페이스로 테스트 환경, 프로덕션 환경등 각각에 환경에 따라 다른 빈들을 써야하는 경우 혹은 특정한 빈을 써야하는 경우 사용</p><a id="more"></a>  <h2 id="프로파일"><a href="#프로파일" class="headerlink" title="프로파일"></a>프로파일</h2><ul><li>프로파일은 빈들의 그룹</li><li>ApplicatioContext의 getEnvironment()를 통해 호출</li><li>활성화할 프로파일 확인 및 설정</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Environment environment = ctx.getEnvironment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>클래스 정의 @Configuration @Profile(“test”) 를 통해 설정</p></li><li><p>메소드 정의 @Bean  @Profile(“test”)를 통해 설정</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Profile</span>(<span class="string">"test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConfiguration</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>-Dspring.profiles.active=”test,A,B…”으로 설정가능</p></li></ul><h2 id="프로퍼티"><a href="#프로퍼티" class="headerlink" title="프로퍼티"></a>프로퍼티</h2><ul><li>다양한 방법으로 정의할 수 있는 설정값</li><li>-Dapp.name=spring5</li><li>properties파일 사용</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.about=spring</span><br></pre></td></tr></table></figure><ul><li>java 사용방법</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext ctx;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;app.about&#125;"</span>)</span><br><span class="line">    String appAbout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Environment environment = ctx.getEnvironment();</span><br><span class="line">        System.out.println(environment.getProperty(<span class="string">"app.name"</span>));</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.appAbout);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>우선순위<ul><li>ServletConfig 매개변수</li><li>ServletContext 매개변수</li><li>JNDI (java:comp/env/)</li><li>JVM 시스템 프로퍼티 (-Dkey=”value”)</li><li>JVM 시스템 환경 변수(운영 체제 환경 변수)</li></ul></li></ul><h2 id="MessageSource"><a href="#MessageSource" class="headerlink" title="MessageSource"></a>MessageSource</h2><p>i18n 기능을 제고하는 인터페이스로 스프링 부트를 사용하면 별다른 설정 없이 messages.properties 사용가능</p><ul><li>ApplicatioContext의 getMessageSource()를 통해 호출</li><li>messages.properties, messages_ko_kr.properties…</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># messages.properties</span><br><span class="line">greeting=Hello, &#123;0&#125;</span><br><span class="line">#messages.properties</span><br><span class="line">greeting=안녕, &#123;0&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(messageSource.getMessage(<span class="string">"greeting"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"hsoh"</span>&#125;, Locale.KOREA));</span><br><span class="line">        System.out.println(messageSource.getMessage(<span class="string">"greeting"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"hsoh"</span>&#125;, Locale.getDefault()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ApplicationEventPublisher"><a href="#ApplicationEventPublisher" class="headerlink" title="ApplicationEventPublisher"></a>ApplicationEventPublisher</h2><p>이벤트 프로그래밍에 필요한 인터페이스를 제공(옵저버 패턴의 구현체)</p><ul><li>ApplicationEventPublisher의 메소드 publishEvent(ApplicationEvent event)로 이벤트 발생</li><li>4.2 이전에는  ApplicationEvent를 상속받아서 이벤트 구현</li><li>이벤트를 발생시키고 EventListener를 등록하여 이벤트 처리</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppEvent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object source;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppEvent</span><span class="params">(Object source, <span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.source = source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getSource</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> source;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        publisher.publishEvent(<span class="keyword">new</span> AppEvent(<span class="keyword">this</span>, <span class="number">100</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppEventHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="meta">@Async</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(AppEvent event)</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().toString());</span><br><span class="line">        System.out.println(<span class="string">"AppEventHandler = "</span> +event.getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>순서지정은 @Order로 지정</li><li>비동기적 실행은 @Async 사용</li></ul><h2 id="ResourceLoader"><a href="#ResourceLoader" class="headerlink" title="ResourceLoader"></a>ResourceLoader</h2><p>리소스를 읽어오는 기능을 제공하는 인터페이스</p><ul><li>ResourceLoader의 getResource(java.lang.String location)로 리소스 조회</li><li>다양한 방법으로 조회가능<ul><li>파일 시스템에서 읽기</li><li>클래스 패스에서 읽기</li><li>URL로 읽기</li><li>상대/절대 경로로 읽기</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ResourceLoader resourceLoader;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Resource resource = resourceLoader.getResource(<span class="string">"classpath:text.txt"</span>);</span><br><span class="line">        System.out.println(resource.exists());</span><br><span class="line">        System.out.println(resource.getDescription());</span><br><span class="line">        Files.lines(Paths.get(resource.getURI())).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Environment는 프로파일과 프로퍼티를 다루는 인터페이스로 테스트 환경, 프로덕션 환경등 각각에 환경에 따라 다른 빈들을 써야하는 경우 혹은 특정한 빈을 써야하는 경우 사용&lt;/p&gt;
    
    </summary>
    
      <category term="Spring 핵심 기술" scheme="http://yoursite.com/categories/Spring-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="IoC" scheme="http://yoursite.com/tags/IoC/"/>
    
      <category term="Bean" scheme="http://yoursite.com/tags/Bean/"/>
    
  </entry>
  
  <entry>
    <title>Spring 핵심 기술 (IoC, Bean - 01)</title>
    <link href="http://yoursite.com/2019/01/05/spring-core-ioc-01/"/>
    <id>http://yoursite.com/2019/01/05/spring-core-ioc-01/</id>
    <published>2019-01-05T02:30:00.000Z</published>
    <updated>2021-04-12T05:32:47.747Z</updated>
    
    <content type="html"><![CDATA[<p>IoC 는 Inversion of Control의 약자로 어떤 객체가 사용하는 의존 객체를 직접 만들어 사용하는게 아니라, 주입 받아 사용하는 방법으로 DI(Dependency Injection)이라고도 한다. 다시 말하면 객체 생명주기를 관리하며 DI 패턴을 제공하여 비즈니스 로직에 집중할 수 있도록 한다.</p><a id="more"></a>  <h2 id="스프링-IoC-컨테이너"><a href="#스프링-IoC-컨테이너" class="headerlink" title="스프링 IoC 컨테이너"></a>스프링 IoC 컨테이너</h2><ul><li>BeanFactory - 가장 최상위 핵심 인터페이스</li><li>애플리케이션 컴포넌트의 중앙 저장소</li><li>빈 설정 소스로 부터 빈 정의를 읽어들이고, 빈을 구성/제공</li></ul><p>스프링 빈(Bean)</p><ul><li>스프링 IoC 컨테이너가 관리하는 객체</li><li>싱글톤, 프로토타입 스코프</li><li>라이프사이클 인터페이스 </li><li>@Bean, @Component, @Service, @Repository 등 어노테이션으로 빈 설정</li><li>application.xml 의 <bean> 테크로 빈 설정</bean></li></ul><h2 id="빈-설정-방법"><a href="#빈-설정-방법" class="headerlink" title="빈 설정 방법"></a>빈 설정 방법</h2><h3 id="스프링-설정파일을-통한-빈-등록"><a href="#스프링-설정파일을-통한-빈-등록" class="headerlink" title="스프링 설정파일을 통한 빈 등록"></a>스프링 설정파일을 통한 빈 등록</h3><ul><li>고전적인 방법으로 application.xml 설정을 통해 빈을 등록</li><li><bean> </bean>을 통해 빈으로 등록할 class를 설정</li><li><property> </property>를 통해 빈 객체를 주입</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookService"</span> <span class="attr">class</span>=<span class="string">"com.ex.forblog.book.BookService"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"bookRepository"</span> <span class="attr">ref</span>=<span class="string">"bookRepository"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"bookRepository"</span> <span class="attr">class</span>=<span class="string">"com.ex.forblog.book.BookRepository"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="component-scan을-이용한-빈-등록"><a href="#component-scan을-이용한-빈-등록" class="headerlink" title="component-scan을 이용한 빈 등록"></a>component-scan을 이용한 빈 등록</h3><ul><li>위 방법은 빈을 하나하나 등록해야하는 불편</li><li><component-scan> 을 통해 어노테이션을 통해 빈으로 설정한 빈 class들을 찾아 등록</component-scan></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.ex.forblog"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="JAVA-config을-이용한-빈-등록"><a href="#JAVA-config을-이용한-빈-등록" class="headerlink" title="JAVA config을 이용한 빈 등록"></a>JAVA config을 이용한 빈 등록</h3><ul><li>최근(꾀 오래전?) 에는 xml파일을 사용하지 않고 JAVA를 사용하여 등록</li><li>@Bean 통해 빈으로 등록</li><li>@Autowire를 통해 빈 객체 주입</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookRepository <span class="title">bookRepository</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BookRepository();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BookService <span class="title">bookService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        BookService bookService = <span class="keyword">new</span> BookService();</span><br><span class="line">        bookService.setBookRepository(bookRepository());</span><br><span class="line">        <span class="keyword">return</span> bookService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ComponentScan을-이용한-빈-등록"><a href="#ComponentScan을-이용한-빈-등록" class="headerlink" title="ComponentScan을 이용한 빈 등록"></a>ComponentScan을 이용한 빈 등록</h3><ul><li>xml과 마찬가지로 JAVA config 또한 @ComponentScan으로 basePackageClasses로 지정된 클래스 하위에서 어노테이션을 통해 빈으로 설정한 빈 class들을 찾아 등록</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackageClasses = Application<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ApplicationConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBootApplication을-이용한-빈-등록"><a href="#SpringBootApplication을-이용한-빈-등록" class="headerlink" title="SpringBootApplication을 이용한 빈 등록"></a>SpringBootApplication을 이용한 빈 등록</h3><ul><li>위의 과정들을 spring boot에서는 @SpringBootApplication를 통해 지원</li><li>@SpringBootApplication을 확인해 보면 @ComponentScan를 확인 가능  </li><li>Application 클래스 하위 패키지에서 빈 class들을 찾아 등록한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(excludeFilters = &#123;</span><br><span class="line"><span class="meta">@Filter</span>(type = FilterType.CUSTOM, classes = TypeExcludeFilter<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">@<span class="title">Filter</span>(<span class="title">type</span> </span>= FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter<span class="class">.<span class="keyword">class</span>) &#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">SpringBootApplication</span> </span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>IoC에 등록된 빈을 사용하는 방법은 @Autowired 어노테이션을 이용하여 객체의 타입에 해당하는 빈을 찾아 주입받아 사용한다. </p><ul><li><p>기본값은 true로 해당 객체 다입을 못찾으면 어플리케이션 구동 실패</p></li><li><p>같은 타입의 빈이 여러개 일 때 @Primary 통해 주입</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span> <span class="meta">@Primary</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HsBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> BookRepository bookRepository;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>같은 타입의 빈이 여러개 일 때 @Qualifier를 통해 주입</p></li><li><p>@Qualifier 사용할 경우 설정이 따로 없으면 빈에 등록된 이름은 다음과 같이 camel 표기법을 사용</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HsBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBookRepository</span> <span class="keyword">implements</span> <span class="title">BookRepository</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span> <span class="meta">@Qualifier</span>(<span class="string">"hsBookRepository"</span>)</span><br><span class="line">    <span class="keyword">public</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="여러-빈-주입-가능"><a href="#여러-빈-주입-가능" class="headerlink" title="여러 빈 주입 가능"></a>여러 빈 주입 가능</h3></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    List&lt;BookRepository&gt; bookRepositories;    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Commponent와-ComponentScan"><a href="#Commponent와-ComponentScan" class="headerlink" title="@Commponent와 @ComponentScan"></a>@Commponent와 @ComponentScan</h3><ul><li>@Commponent는 빈으로 등록할 class</li><li>@Commponent는 @Controller, @Service, @Repository로 구체화 되어 사용</li><li>@ComponentScan는 특정 패키지 안의 클래스들을 스캔하여 빈 등록</li><li>실제 스캐닝은 ConfigurationClassPostProcessor라는 BeanFactoryPostProcessor에<br>의해 처리</li></ul><h2 id="빈-스코프"><a href="#빈-스코프" class="headerlink" title="빈 스코프"></a>빈 스코프</h2><ul><li>빈은 싱글톤, 프로토타입 스코프를 가짐</li><li>스코프 기본은 싱글톤, @Scope를 통해 설정 가능</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span> <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proto</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>싱글톤 빈이 프로토타입 빈을 참조하려면 @Scope에 proxyMode 설정</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="meta">@Scope</span>(value = <span class="string">"prototype"</span>, proxyMode = ScopedProxyMode.TARGET_CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proto</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Proto proto;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Proto <span class="title">getProto</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> proto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IoC 는 Inversion of Control의 약자로 어떤 객체가 사용하는 의존 객체를 직접 만들어 사용하는게 아니라, 주입 받아 사용하는 방법으로 DI(Dependency Injection)이라고도 한다. 다시 말하면 객체 생명주기를 관리하며 DI 패턴을 제공하여 비즈니스 로직에 집중할 수 있도록 한다.&lt;/p&gt;
    
    </summary>
    
      <category term="Spring 핵심 기술" scheme="http://yoursite.com/categories/Spring-%ED%95%B5%EC%8B%AC-%EA%B8%B0%EC%88%A0/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="IoC" scheme="http://yoursite.com/tags/IoC/"/>
    
      <category term="Bean" scheme="http://yoursite.com/tags/Bean/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 정리(04)</title>
    <link href="http://yoursite.com/2018/12/08/spring-boot-start-04/"/>
    <id>http://yoursite.com/2018/12/08/spring-boot-start-04/</id>
    <published>2018-12-07T17:41:18.000Z</published>
    <updated>2021-04-12T05:32:47.746Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>를 이용한 RESTful API 개발 4번째 입니다. 간략하게 JPA 사용법과 도메인 정의에 대해서 알아보며,  <a href="https://hsoh1990.github.io/2018/08/30/spring-boot-start-03/" target="_blank" rel="noopener">Spring boot를 이용한 REST API 개발(03)</a>에서 사용한 구현한 Repository를 변경하겠습니다.<br><a id="more"></a>  </p><h2 id="Gradle-설정"><a href="#Gradle-설정" class="headerlink" title="Gradle 설정"></a>Gradle 설정</h2><p>먼저  dependenccy를 설정하기 위해 build.gradle을 수정하겠습니다. <a href="https://hsoh1990.github.io/2018/08/30/spring-boot-start-03/" target="_blank" rel="noopener">Spring boot를 이용한 REST API 개발(03)</a>에서 설정까지 따라 하셨다면 build.gradle파일에서 <code>dependencies</code> 에 db에 관련된 dependency만 추가 하시면 됩니다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    ...</span><br><span class="line">    compile(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line">    runtime(<span class="string">'org.postgresql:postgresql'</span>)</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="application-yml-설정"><a href="#application-yml-설정" class="headerlink" title="application.yml 설정"></a>application.yml 설정</h2><p>PostgreSQL을 사용하며, 다운로드 및 설치는 <a href="https://www.postgresql.org/download/" target="_blank" rel="noopener">여기</a>에서 각 OS에 맞는 버전으로 다운받으신 후 설치하시면 됩니다. </p><p>다음 <code>resources/application.yml</code>을 수정 합니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:postgresql://localhost:5432/spring_start</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">hsoh</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">****</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">create</span></span><br><span class="line">    <span class="attr">generate-ddl:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>table을 자동으로 생성하기 위해 hibernate를 사용하였습니다. jpa:show-sql: true로 설정하여 서버 구동시 쿼리를 확인합니다. 또한  jpa:hibernate:ddl-auto: create로 하게되면 서버를 실행할 떄 혹은 테스트를 진행할때 기존에 있던 테이블을 지우고 다시 만들게 됩니다.</p><p>먼저 코드를 변경했다고 치고 서버를 구동시켜 보면 다음과 같은 로그를 확인할 수 있습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: drop table <span class="keyword">if</span> exists account cascade</span><br><span class="line">Hibernate: create table account (id  serial not null, email varchar(50) not null, name varchar(15) not null, password varchar(255) not null, primary key (id))</span><br><span class="line">Hibernate: alter table account add constraint UK_q0uja26qgu1atulenwup9rxyr unique (email)</span><br><span class="line">Hibernate: alter table account add constraint UK_bb9lrmwswqvhcy1y430ki00ir unique (name)</span><br></pre></td></tr></table></figure><p>그러니 실제로 운영중인 DB를 사용할 경우에는 조심하여야 합니다. (한번 실수가…) </p><h2 id="Account-도메인-수정"><a href="#Account-도메인-수정" class="headerlink" title="Account 도메인 수정"></a>Account 도메인 수정</h2><p>이제 설정을 완료했으니 도메인을 정의해보죠.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"account"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">4</span>, max = <span class="number">15</span>)</span><br><span class="line">    <span class="meta">@Column</span>(unique = <span class="keyword">true</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Size</span>(max = <span class="number">50</span>)</span><br><span class="line">    <span class="meta">@Column</span>(unique = <span class="keyword">true</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>처음 보이는 @Entity 어노테이션의 경우 엔티티 클래스임을 지정하여 JPA가 엔티티로써 관리하며, 테이블과 매핑합니다. 보통 @Table 어노테이션을 이용하여 엔티티와 매핑할 DB 테이블을 지정하지만 생략시 엔티티 클래스 이름 혹은 (name = ‘….’)에 명시된 이름의 테이블로 매핑됩니다.</p><p>다음 @Id는 기본키를 매핑시켜주면  @GeneratedValue(strategy = GenerationType.IDENTITY)기본키 생성을 DB에 위임하여 사용하도록 설정됩니다.</p><p> @Column은 컬럼의 이름을 이용하여 지정된 필드나 속성을 테이블의 칼럼에 매칭한다. 역시 생략하면 속겅과 같은 이름의 칼럼으로 매핑됩니다.  자주 사용하는 속성만 정의해 보겠습니다. </p><p><code>name</code>은 매핑할 table 컬럼 이름, 기본은 객체의 필드 이름을 사용합니다. <code>nullable</code> 은 false로 설정하면 DDL생성시에 “NOT NULL” 제약조건을 추가해 줍니다. <code>unique</code>는 true로 설정하면 uniqueConstraints와 같은 동작을 합니다.</p><p>추가적인 속성들은 학습하시는걸 추천드립니다.</p><h2 id="AccountRepository-수정"><a href="#AccountRepository-수정" class="headerlink" title="AccountRepository 수정"></a>AccountRepository 수정</h2><p>다음은 JpaRepository를 extends하여  Repository를 수정합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>음.. 먼가 다 사라졌습니다. 지금까지 구현해야했던 sava(), findById(), delete() 메소드들은 JpaRepository에 이미 정의되어 있습니다.  코드를 확인하고 싶으시면 <code>SimpleJpaRepository</code> 를 확인하시기 바랍니다.</p><h2 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h2><p>수정을 했으니 테스트를 확인해보죠. 처음 구현할 때 자신있게 될꺼라고 생각했지만 실제로 테스트를 해보면 먼가 문제가 있는듯 보입니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Detail: Key (email)=(hsoh@gmail.com) already exists.</span><br></pre></td></tr></table></figure><p>이미 있다고 하는데 지금까지는 <code>unique = true</code>를 하지않았기 떄문입니다. 그럼 실제 테스트에서 처리하기 위해 <code>@Transactional</code>를 붙혀줍니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class">@<span class="title">Transactional</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountControllerTest</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다시 테스트를 해보면 성공적으로 마쳤을꺼라고 예상됩니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>원래는 자동 문서화도구인 Swagger도 연동해보려고 했지만 springdoc를 사용하는게 기존 controller코드를 로직에만 집중할 수 있을꺼 같아서 학습을 하려고 합니다. 정리가 되면 spring doc 사용법과 OAuth2.0 사용법을 정리하겠습니다. </p><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://spring.io/projects/spring-boot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot&lt;/a&gt;를 이용한 RESTful API 개발 4번째 입니다. 간략하게 JPA 사용법과 도메인 정의에 대해서 알아보며,  &lt;a href=&quot;https://hsoh1990.github.io/2018/08/30/spring-boot-start-03/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring boot를 이용한 REST API 개발(03)&lt;/a&gt;에서 사용한 구현한 Repository를 변경하겠습니다.&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot 정리" scheme="http://yoursite.com/categories/Spring-Boot-%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="PostgreSQL" scheme="http://yoursite.com/tags/PostgreSQL/"/>
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
      <category term="JUnit" scheme="http://yoursite.com/tags/JUnit/"/>
    
      <category term="lombok" scheme="http://yoursite.com/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 정리(03)</title>
    <link href="http://yoursite.com/2018/12/07/spring-boot-start-03/"/>
    <id>http://yoursite.com/2018/12/07/spring-boot-start-03/</id>
    <published>2018-12-07T14:07:31.000Z</published>
    <updated>2021-04-12T05:32:47.746Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>를 이용한 RESTful API 개발 3번째 입니다. 이번에는 요구사항을 정의한 후 Account 도메인을 통해 CRUD 로직을 만들어 보겠습니다.<br><a id="more"></a>  </p><h2 id="Gradle-설정"><a href="#Gradle-설정" class="headerlink" title="Gradle 설정"></a>Gradle 설정</h2><p>먼저  dependenccy를 설정하기 위해 build.gradle을 확인하겠습니다. <a href="https://hsoh1990.github.io/2018/08/30/spring-boot-start-02/" target="_blank" rel="noopener">Spring boot를 이용한 REST API 개발(02)</a>에서 설정을 했다면 다음과 같습니다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">ext &#123;</span><br><span class="line">springBootVersion = <span class="string">'1.5.15.RELEASE'</span></span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'eclipse'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'idea'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.ex'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-security'</span>)</span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line">    compile(<span class="string">'org.modelmapper:modelmapper:0.7.5'</span>)</span><br><span class="line"></span><br><span class="line">    compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line"></span><br><span class="line">testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">testCompile(<span class="string">'org.springframework.security:spring-security-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TEST-코드-작성"><a href="#TEST-코드-작성" class="headerlink" title="TEST 코드 작성"></a>TEST 코드 작성</h2><p>spring boot에서 테스트는 <code>src/test/java/packagename/..</code>에 <code>@SpringBootTest</code>를 사용해 작성합니다.<code>AccountControllerTest</code> Class를 사용하여 기본 틀을 작성하면 다음과 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">AccountControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDto.AccountRegistDto registerAccountDto;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc = MockMvcBuilders</span><br><span class="line">                .webAppContextSetup(webApplicationContext)</span><br><span class="line">                .apply(springSecurity())</span><br><span class="line">                .alwaysDo(print())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>현재 만들지 않은 Class도 있지만 그대로 진행합니다. 필요한 Class는 진행하면서 구현하도록 하며, 코드에 대한 설명을 추후에 하나씩 살펴보도록 하고 일딴 개발을 진행해 보겠습니다.  </p><h2 id="Account-도메인-CRUD-명세-정의"><a href="#Account-도메인-CRUD-명세-정의" class="headerlink" title="Account 도메인 CRUD 명세 정의"></a>Account 도메인 CRUD 명세 정의</h2><p>다음 개발에 앞서 Test코드를 작성하기 위한 명세를 정의하겠습니다.</p><ol><li>계정 등록<ul><li>계정은 name, password, email을 입력하여 등록한다</li><li>등록이 정상적으로 수행되면 id, name, password, email를 가지는 데이터를 저장한다.</li><li>등록이 정상적으로 수행되면 201 상태코드와 password를 제외한 계정정보를 반환한다.</li><li>등록 시 name, password, email 중 하나라도 없으면 400에러를 반환한다.</li></ul></li><li>계정 리스트 조회<ul><li>조회가 정상적으로 수행되면 200 상태코드와  password를 제외한 계정 리스트를 반환한다. </li></ul></li><li>id를 이용하여 계정 조회<ul><li>특정 id로 조회가 정상적으로 수행되면 200 상태코드와 password를 제외한 계정정보를 반환한다.</li><li>특정 id에 해당하는 계정이 없으면 400에러를 반환하며, 조회한 id를 반환한다.</li></ul></li><li>id를 이용하여 계정 정보 수정<ul><li>특정 id로 수정이 정상적으로 수행되면 200 상태코드와 password를 제외한 계정정보를 반환한다.</li><li>특정 id에 해당하는 계정이 없으면 400에러를 반환하며, 조회한 id를 반환한다.</li></ul></li><li>id를 이용하여 계정 삭제<ul><li>특정 id로 수정이 정상적으로 수행되면 200 상태코드와 password를 제외한 계정정보를 반환한다.</li><li>특정 id에 해당하는 계정이 없으면 400에러를 반환하며, 조회한 id를 반환한다.</li></ul></li></ol><h2 id="계정-등록"><a href="#계정-등록" class="headerlink" title="계정 등록"></a>계정 등록</h2><h3 id="등록-성공"><a href="#등록-성공" class="headerlink" title="등록 성공"></a>등록 성공</h3><p>먼저 명세에 정의된 내용을 Test 코드로 옮겨 보겠습니다. 테스트는 given, when, then 순서로 특정 상황(given)에서 특정 API로 요청했습때(when) 원하는 결과가 리턴(then)되는지 확인하는 방식으로 진행합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 계정을 등록한다</span></span><br><span class="line"><span class="comment"> * id:1, name:hsoh, password:password, email:hsoh@gmail.com</span></span><br><span class="line"><span class="comment"> * 성공적으로 등록되면 201 상태코드를 반환한다.</span></span><br><span class="line"><span class="comment"> * 성공적으로 등록되면 등록한 계정정보가 반환된다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registAccount</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Given</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// When</span></span><br><span class="line">    <span class="keyword">final</span> ResultActions resultActions = mockMvc.perform(</span><br><span class="line">            post(<span class="string">"/accounts"</span>).contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                    .content(mapper.writeValueAsString(<span class="keyword">this</span>.registerAccountDto))</span><br><span class="line">                    .with(csrf()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Then</span></span><br><span class="line">    resultActions.andExpect(status().isCreated())</span><br><span class="line">            .andExpect(jsonPath(<span class="string">"$.name"</span>).value(<span class="string">"hsoh"</span>))</span><br><span class="line">            .andExpect(jsonPath(<span class="string">"$.email"</span>).value(<span class="string">"hsoh@gmail.com"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음과 같이 Test 코드를 작성 했하고 실행해보면 구현되지 않은 내용이기 때문에 에러가 발생됩니다. 이제 다시 코드로 돌아가 구현해 보겠습니다.</p><p>먼저 account package를 생성하고 Account 도메인을 정의 합니다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    Account(String name, String password, String email) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음 <code>/accounts</code>요청을 처리할 controller, service, repository, dto를 생성합니다.</p><ul><li>AccountController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accounts"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ModelMapper modelMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">registAccount</span><span class="params">(@RequestBody <span class="keyword">final</span> AccountRegistDto accountDto)</span> </span>&#123;</span><br><span class="line">        Account account = accountService.register(accountDto);</span><br><span class="line">        AccountResponseDto accountResponseDto = modelMapper.map(account, AccountResponseDto<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(accountResponseDto, HttpStatus.CREATED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AccountService</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ModelMapper modelMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">register</span><span class="params">(AccountRegistDto accountDto)</span> </span>&#123;</span><br><span class="line">        Account account = modelMapper.map(accountDto, Account<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> accountRepository.save(account);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AccountRepository</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Account&gt; accounts = <span class="keyword">new</span> ArrayList&lt;Account&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> accountId;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    AccountRepository() &#123;</span><br><span class="line">        accountId = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">save</span><span class="params">(Account account)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (account.getId() == <span class="number">0</span>)&#123;</span><br><span class="line">            account.setId(accounts.size()+<span class="number">1</span>);</span><br><span class="line">            accounts.add(account);</span><br><span class="line">            accountId += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            accounts.set(account.getId()-<span class="number">1</span>, account);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AccountDto.AccountRegistDto, AccountDto.AccountResponseDto</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"squid:S1118"</span>)</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDto</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRegistDto</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountResponseDto</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음 다시 테스트를 돌려보면 역시 에러… 이번에는 <code>ModelMapper</code>가 없어서 그렇습니다. <code>@Bean</code>를 등록해보죠.</p><ul><li>ForBlogApplication</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForBlogApplication</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelMapper <span class="title">modelMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelMapper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다시 테스트 코드 실해하면 녹색으로 처리된 테스트 코드를 만날 수 있습니다.</p><h3 id="등록-실패"><a href="#등록-실패" class="headerlink" title="등록 실패"></a>등록 실패</h3><p>테스트는 등록에 실패하느 경우도 생각해야합니다. 등록에 실패하는 경우에는 어떤 처리를 해야하는지 어떤 동작을 해야하는지 명세에 정의되어 있고 그대로 동작하는지 확인하기 위해 다음과 같은 Test 코드를 작성 했습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * name, password, email 필드중 하나라도 없으면 등록하면 실패한다.</span></span><br><span class="line"><span class="comment"> * 404 상태코드를 반환한다.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registAccountBadRequest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//Given</span></span><br><span class="line">    <span class="keyword">this</span>.registerAccountDto.setName(<span class="string">" "</span>);</span><br><span class="line">    <span class="keyword">this</span>.registerAccountDto.setPassword(<span class="string">"1234"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//When</span></span><br><span class="line">    <span class="keyword">final</span> ResultActions resultActions = mockMvc.perform(</span><br><span class="line">            post(<span class="string">"/accounts"</span>).contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                    .content(mapper.writeValueAsString(<span class="keyword">this</span>.registerAccountDto))</span><br><span class="line">                    .with(csrf()));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Then</span></span><br><span class="line">    resultActions.andExpect(status().isBadRequest());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이번에 테스트를 실행시켜보면 역시 에러를 만날 수 있습니다. 잘못된 요청에 대한 처리를 하지 않았기때문이죠.</p><p>그럼 코드를 다시 수정해 보겠습니다. 저는 Spring에서 제공하는 <code>@Valid</code>를 사용하여 요청 데이터의 유효성 검사를 진행하겠습니다.</p><ul><li>AccountController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accounts"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ModelMapper modelMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(produces = MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">registAccount</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> AccountRegistDto accountDto,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        <span class="keyword">final</span> BindingResult result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(result.getFieldErrors(), HttpStatus.BAD_REQUEST);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Account account = accountService.register(accountDto);</span><br><span class="line">        AccountResponseDto accountResponseDto = modelMapper.map(account, AccountResponseDto<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(accountResponseDto, HttpStatus.CREATED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AccountController의 registAccount함수에서 AccountRegistDto앞에 <code>@Valid</code>를 사용하면 AccountRegistDto에서 정의된 유효성 검사를 진행합니다. 그럼 AccountRegistDto로 이동하여 어떤 유효성을 검사하는지 정의해 보죠</p><ul><li>AccountDto.AccountRegistDto, AccountDto.AccountResponseDto</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"squid:S1118"</span>)</span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDto</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRegistDto</span> </span>&#123;</span><br><span class="line">        <span class="meta">@NotBlank</span></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="meta">@NotBlank</span></span><br><span class="line">        <span class="keyword">private</span> String password;</span><br><span class="line">        <span class="meta">@NotBlank</span></span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountResponseDto</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> String email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@NotBlank</code>가 생겼습니다. 해당 필드가 비어있으면 에러를 발생시킵니다. 유효성 검사는 @Min, @Max, @NotBlank 등 다양한 어노테이션들이 있으니 확인해 보세요.</p><p>이와 같은 방법으로 위에 정의한 요구사항들을 구현해보세요. 구현한 내용을 <a href="https://github.com/hsoh1990/spring-for-blog/tree/spring-start-03" target="_blank" rel="noopener">여기</a>에 있습니다.</p><h2 id="에러처리"><a href="#에러처리" class="headerlink" title="에러처리"></a>에러처리</h2><p>추가적으로 spring으로 개발하다보면 위와 같이 에러처리를 해야합니다. 이걸 각 함수마다 따로 정의를 하다보면 중복되는 에러처리가 발생합니다. <code>@ExceptionHandler</code>를 통해 이런 중복된 코드 줄이겠습니다. </p><ul><li>AccountController</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.account;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/accounts"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = NotFoundException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">ResponseEntity</span> <span class="title">accountNotfoundException</span>(<span class="title">NotFoundException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        ExceptionDto exceptionDto = <span class="keyword">new</span> ExceptionDto();</span><br><span class="line">        exceptionDto.setMessage(<span class="string">"id가 "</span> + e.getMessage() + <span class="string">"인 계정이 없습니다."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(exceptionDto, HttpStatus.BAD_REQUEST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 코드는 NotFoundException이 발생하면 처리합니다.</p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p>이상으로  글재주가 없다는걸 다시한번 느끼면서 account CRUD에 대한 정리를 마치겠습니다. 다음에는 JPA를 사용하여 DB(Postgresql)와 연동해 보겠습니다.</p><p>감사합니다.</p><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://spring.io/projects/spring-boot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot&lt;/a&gt;를 이용한 RESTful API 개발 3번째 입니다. 이번에는 요구사항을 정의한 후 Account 도메인을 통해 CRUD 로직을 만들어 보겠습니다.&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot 정리" scheme="http://yoursite.com/categories/Spring-Boot-%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="PostgreSQL" scheme="http://yoursite.com/tags/PostgreSQL/"/>
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
      <category term="JUnit" scheme="http://yoursite.com/tags/JUnit/"/>
    
      <category term="lombok" scheme="http://yoursite.com/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 정리(02)</title>
    <link href="http://yoursite.com/2018/09/28/spring-boot-start-02/"/>
    <id>http://yoursite.com/2018/09/28/spring-boot-start-02/</id>
    <published>2018-09-28T13:48:48.000Z</published>
    <updated>2021-04-12T05:32:47.746Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>를 이용한 REST API 서버를 만들기위해 의존성을 추가하고 그게 맞는 환경설정을 방법을 알아보겠습니다. <a href="https://docs.spring.io/spring-boot/docs/1.5.4.RELEASE/reference/htmlsingle/#getting-started" target="_blank" rel="noopener">Spring Boot Reference Guide</a>를 참고하여 Spring Boot에서 제공하는 starter들과 Gradle을 사용하는 법을 정리하겠습니다.<br><a id="more"></a>  </p><h2 id="Spring-Boot-Gradle-사용법"><a href="#Spring-Boot-Gradle-사용법" class="headerlink" title="Spring Boot  Gradle 사용법"></a>Spring Boot  Gradle 사용법</h2><p>Spring Boot에서 Gradle 사용법은 <a href="https://docs.spring.io/spring-boot/docs/1.5.4.RELEASE/reference/htmlsingle/#using-boot-gradle" target="_blank" rel="noopener">13.3</a>에 정의 되어 있습니다. </p><p>문서에서 설명하듯 Maven에서는 부모 의존성를 받아 spring boot에서 사용하는 추가적인 의존성의 버전을 신경쓰지 않고 개발할 수 있습니다. </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Gradle에서는 <code>dependencies</code>섹션 에서 ‘starter’을 직접 가져올 수 있습니다 . Maven과는 달리 Gradle에서는 일부 구성을 공유하기 위해 가져올 수퍼 부모는 없습니다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-web:1.5.4.RELEASE"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://docs.spring.io/spring-boot/docs/1.5.4.RELEASE/reference/htmlsingle/#build-tool-plugins-gradle-plugin" target="_blank" rel="noopener"><code>spring-boot-gradle-plugin</code></a>도 사용할 수 있으며 실행 가능한 jar를 만들고 소스에서 프로젝트를 실행하는 작업을 제공합니다. 또한 다른 기능들 중에서도 스프링 부트에 의해 관리되는 모든 종속성의 버전 번호를 생략 할 수있는 종속성 관리를 제공합니다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'1.5.4.RELEASE'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    jcenter()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">"org.springframework.boot:spring-boot-starter-web"</span>)</span><br><span class="line">    testCompile(<span class="string">"org.springframework.boot:spring-boot-starter-test"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-application-starters"><a href="#Spring-Boot-application-starters" class="headerlink" title="Spring Boot application starters"></a>Spring Boot application starters</h2><p>Spring Boot에는 다양한 <a href="https://docs.spring.io/spring-boot/docs/1.5.4.RELEASE/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">starter</a>들이 존재 합니다. 예를 들어 Spring Boot의 코어 기능을 가지는 <code>spring-boot-starter</code>가 있습니다. 또한 JPA를 사용하기 위한 <code>spring-boot-starter-data-jpa</code>또는 Spring Security 의존성을 가지는 <code>spring-boot-starter-security</code> 등등 다양한 starter들을 확인할 수 있습니다.</p><table><thead><tr><th>Name</th><th>Description</th><th>Pom</th></tr></thead><tbody><tr><td><code>spring-boot-starter</code></td><td>Core starter, including auto-configuration support, logging and YAML</td><td><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.4.RELEASE/spring-boot-starters/spring-boot-starter/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td><code>spring-boot-starter-data-jpa</code></td><td>Starter for using Spring Data JPA with Hibernate</td><td><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.4.RELEASE/spring-boot-starters/spring-boot-starter-data-jpa/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td><code>spring-boot-starter-security</code></td><td>Starter for using Spring Security</td><td><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.4.RELEASE/spring-boot-starters/spring-boot-starter-security/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td><code>spring-boot-starter-social-facebook</code></td><td>Starter for using Spring Social Facebook</td><td><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.4.RELEASE/spring-boot-starters/spring-boot-starter-social-facebook/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td><code>spring-boot-starter-test</code></td><td>Starter for testing Spring Boot applications with libraries including JUnit, Hamcrest and Mockito</td><td><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.4.RELEASE/spring-boot-starters/spring-boot-starter-test/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td><code>spring-boot-starter-thymeleaf</code></td><td>Starter for building MVC web applications using Thymeleaf views</td><td><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.4.RELEASE/spring-boot-starters/spring-boot-starter-thymeleaf/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td><code>spring-boot-starter-validation</code></td><td>Starter for using Java Bean Validation with Hibernate Validator</td><td><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.4.RELEASE/spring-boot-starters/spring-boot-starter-validation/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td><code>spring-boot-starter-web</code></td><td>Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container</td><td><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.4.RELEASE/spring-boot-starters/spring-boot-starter-web/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td><code>spring-boot-starter-websocket</code></td><td>Starter for building WebSocket applications using Spring Framework’s WebSocket support</td><td><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.4.RELEASE/spring-boot-starters/spring-boot-starter-websocket/pom.xml" target="_blank" rel="noopener">Pom</a></td></tr><tr><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>모든 공식 starter는 spring-boot-starter- <em>, </em>라는 비슷한 명명 패턴을 따릅니다. 이 명명 규칙은 starter를 찾아야 할 때 도움을 주기위한 것입니다. 많은 IDE의 Maven 통합을 통해 의존성을 이름으로 검색 할 수 있습니다. 개인적인 프로젝트에서는 spring-boot-starter- <em>, </em>로 시작해서는 안됩니다. </p><h2 id="Gradle-Practice"><a href="#Gradle-Practice" class="headerlink" title="Gradle Practice"></a>Gradle Practice</h2><p><a href="https://hsoh1990.github.io/2018/08/30/spring-boot-start-01/" target="_blank" rel="noopener">Spring boot를 이용한 REST API 개발(01)</a>에서 프로젝트를 생성했습니다. Intellij에서는 프로젝트를 생성하면 다음과 같이 기본적인 구조가 생성되며 API테스트를 위해 <code>compile(&#39;org.springframework.boot:spring-boot-starter-web&#39;)</code>를 추가 했습니다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">ext &#123;</span><br><span class="line">springBootVersion = <span class="string">'1.5.15.RELEASE'</span></span><br><span class="line">&#125;</span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'eclipse'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'idea'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'org.springframework.boot'</span></span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.ex'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter'</span>)</span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line"></span><br><span class="line">testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이번에는 기본적으로 사용할 starter및 의존성을 추가해 보겠습니다. 추가할 의존성은 <code>spring-boot-starter-security</code> <code>org.projectlombok:lombok</code>입니다.</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">   compile(<span class="string">'org.springframework.boot:spring-boot-starter-security'</span>)</span><br><span class="line">   compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line"></span><br><span class="line">   compileOnly(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line"></span><br><span class="line">   testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">   testCompile(<span class="string">'org.springframework.security:spring-security-test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다음 Gradle이 빌드가 끝나면 의존성이 정상적으로 추가된것을 확인할 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/33083822/47100747-2a723580-d273-11e8-8d18-42bf26a3206c.png" alt="springboot01"></p><p>다음 Intellij에서 lombok을 사용하기 위해서는 <code>Build, Execution, Deployment</code> -&gt;  <code>Annotation Processors</code> -&gt; <code>Enable annotation processing</code>을 체크해 줍니다.</p><p>그럼 lombok을 테스트 하기위해 간단한 클래스를 만들고 ForBlogController에서 사용해 보겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLombok</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForBlogController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TestLombok testLombok = <span class="keyword">new</span> TestLombok();</span><br><span class="line">        testLombok.setStr(<span class="string">"Hello World!"</span>);</span><br><span class="line">        <span class="keyword">return</span> testLombok.getStr();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기까지 진행한 후 Run하면 정상적으로 실행이 되지만 <code>spring-boot-starter-security</code>에 대한 설정이 없어 다음과 같은 에러 페이지가 나옵니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Whitelabel Error Page</span><br><span class="line">This application has no explicit mapping for /error, so you are seeing this as a fallback.</span><br><span class="line"></span><br><span class="line">Thu Oct 18 01:16:16 KST 2018</span><br><span class="line">There was an unexpected error (type=Unauthorized, status=401).</span><br><span class="line">Bad credentials</span><br></pre></td></tr></table></figure><p>현재는 보안은 그냥 넘어가도록 설정할 예정이며 추후에 OAuth2.0을 이용해 보겠습니다. <code>spring-boot-starter-security</code>에 대한 설정은 JAVA Config를 통해 진행 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(<span class="keyword">final</span> HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.authorizeRequests().antMatchers(<span class="string">"*"</span>).permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마지막으로 Spring Boot를 실행하면 기본 포트는 8080으로 설정되어 있습니다. 기본 포트를 변경하는 방법은 application.properties 혹은 application.yml에서 설정할 수 있고 지금 예제에서는 application.yml를 사용하여 9090 포트를 이용하겠습니다. 경로는 <code>src/main/resources</code>에 생성합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">9090</span></span><br></pre></td></tr></table></figure><p>이상으로 Gradle 사용 및 환경설정에 대해 알아봤습니다.</p><p>감사합니다.</p><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://spring.io/projects/spring-boot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot&lt;/a&gt;를 이용한 REST API 서버를 만들기위해 의존성을 추가하고 그게 맞는 환경설정을 방법을 알아보겠습니다. &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/1.5.4.RELEASE/reference/htmlsingle/#getting-started&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot Reference Guide&lt;/a&gt;를 참고하여 Spring Boot에서 제공하는 starter들과 Gradle을 사용하는 법을 정리하겠습니다.&lt;br&gt;
    
    </summary>
    
      <category term="Spring Boot 정리" scheme="http://yoursite.com/categories/Spring-Boot-%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="PostgreSQL" scheme="http://yoursite.com/tags/PostgreSQL/"/>
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
      <category term="JUnit" scheme="http://yoursite.com/tags/JUnit/"/>
    
      <category term="lombok" scheme="http://yoursite.com/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 정리(01)</title>
    <link href="http://yoursite.com/2018/08/30/spring-boot-start-01/"/>
    <id>http://yoursite.com/2018/08/30/spring-boot-start-01/</id>
    <published>2018-08-30T13:48:48.000Z</published>
    <updated>2021-04-12T05:32:47.746Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://spring.io/projects/spring-boot" target="_blank" rel="noopener">Spring Boot</a>를 이용한 REST API 서버를 만들기를 정리하려고 합니다. 처음 Spring을 접하고 SpringBoot를 처음 사용했을 때 간단히 따라할 강의나 자료가 부족했고 러닝커브도 심해서 당장 먼가 팍팍 진행된다는 느낌을 못받아서 힘들었던거 같습니다.</p><a id="more"></a>  <p> 또한 구글링을 하면 node, python등과 같은 언어로 간단히 API서버를  만드는 방법을 많이 볼 수 있는데 그런 이유때문에 처음 웹개발을 Java가 아닌 다른언어로 시작하는 경우가 많이 증가한거 같습니다. 물론 저도 express가 처음 접한 웹프레임워크입니다. 하지만 아직 국내 많은 기업들은 Spring을 사용하고 있습니다.    </p><p>그래서 공부 혹은 개발을 진행하면서 적용한 부분들 중심으로 정리를 하려하며, 내용은 다음과 같습니다.</p><ol><li>Spring Boot 프로젝트 생성</li><li>의존성 추가 및 환경설정</li><li>도메인(account) CRUD 및 테스트</li><li>데이터 베이스 연동</li><li>Swagger 연동 및 사용법</li></ol><h2 id="Spring-Boot-프로젝트-생성"><a href="#Spring-Boot-프로젝트-생성" class="headerlink" title="Spring Boot 프로젝트 생성"></a>Spring Boot 프로젝트 생성</h2><h3 id="개발-환경"><a href="#개발-환경" class="headerlink" title="개발 환경"></a>개발 환경</h3><p>intellij</p><p>spring boot</p><p>gradle</p><p>JUnit</p><h3 id="Intellij를-이용한-Spring-Boot-프로젝트-생성"><a href="#Intellij를-이용한-Spring-Boot-프로젝트-생성" class="headerlink" title="Intellij를 이용한 Spring Boot 프로젝트 생성"></a>Intellij를 이용한 Spring Boot 프로젝트 생성</h3><p>Intellij를 이용하여 spring프로젝트를 생성합니다.</p><p>Intellij에서는 <code>New Project</code>  -&gt; <code>pring Initializr</code> 를 선택하면 Spring Boot 프로젝트를 생성할 수 있습니다. </p><p><img src="https://user-images.githubusercontent.com/33083822/45309349-7dfbb000-b55e-11e8-9947-9308ff3b1d61.png" alt="springboot01"></p><p>다음으로 넘어가면 <code>Project Metadata</code>를 설정할 수 있습니다. 적당한 이름을 기입한 후 type을 <code>Gradle Project</code>로 변경합니다.</p><p><img src="https://user-images.githubusercontent.com/33083822/45309350-7e944680-b55e-11e8-9e4a-5f9aec5273de.png" alt="springboot02"></p><p>다음으로 넘어가면 Dependencies와 Spring Boot 버전을 선택할 수 있습니다. Spring Boot 버전은 1.5.15.버전을 사용할 예정이며,  테스트를 위해 <code>spring-boot-starter-web</code>만 추가하고 나머지 Dependecies는 진행 하면서 추가합니다. </p><p>설정이 완료되면 프로젝트가 생성되고 gradle이 자동으로 빌드됩니다.</p><p><img src="https://user-images.githubusercontent.com/33083822/45309351-7e944680-b55e-11e8-8be5-48600377478b.png" alt="springboot03"></p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h2><p>간단히 동작을 확인하기 위해 <code>ForBlogController.java</code> 파일을 생성합니다. 생성은 com.ex.forblog에서 오른쪽 버튼 클릭 후 <code>new</code> -&gt; <code>Java Class</code>  또는 <code>command + n</code> 을 통해 생성합니다. 생성된 파일에  다음과 같이 같단한 API를 만들어 보죠.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ex.forblog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForBlogController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>build.gradle파일은 다음과 같습니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">dependencies</span> <span class="string">&#123;</span></span><br><span class="line"><span class="string">compile('org.springframework.boot:spring-boot-starter')</span></span><br><span class="line"><span class="string">compile('org.springframework.boot:spring-boot-starter-web')</span></span><br><span class="line"><span class="string">testCompile('org.springframework.boot:spring-boot-starter-test')</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>다음 서버를 구동시킨 후 localhost:8080으로 접속해 보죠.</p><p><img src="https://user-images.githubusercontent.com/33083822/45309352-7f2cdd00-b55e-11e8-9317-7b0c69c1c444.png" alt="springboot04"></p><h2 id="git-github연동"><a href="#git-github연동" class="headerlink" title="git, github연동"></a>git, github연동</h2><p>git은 현재 버전관리 시스템으로 많이 활용되고 있으며, 많은 기업들이 github, gitlab등를 통해 협업하고 있다. git에 대한 자세한 내용은 인터넷이 더 자세히 나와있기 때문에 생략합니다.</p><p>프로젝트 생성시 만들어진 <code>.gitignore</code>파일을 새로만든 github repository에 push한 다음 나머지 코드들도 push하겠습니다. 먼저 github에 새로운 repository를 만듭니다. </p><p><img src="https://user-images.githubusercontent.com/33083822/45309353-7f2cdd00-b55e-11e8-85f4-4f52103d0bc3.png" alt="springboot05"></p><p><img src="https://user-images.githubusercontent.com/33083822/45309356-7f2cdd00-b55e-11e8-9fcf-902c2e793179.png" alt="springboot06"></p><p>다시 Intellij로 돌아와 터미널을 열어 git프로젝트를 만든 후 github repository를 추가합니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git remote add origin git@github.com:hsoh1990/spring-for-blog.git</span><br></pre></td></tr></table></figure><p>다음으로 Intellij를 통해서 <code>add</code> -&gt; <code>commit</code> -&gt; <code>push</code> 를 진행하면 다음과 같습니다.</p><p><img src="https://user-images.githubusercontent.com/33083822/45309357-7fc57380-b55e-11e8-990f-e534154659ab.png" alt="springboot07"></p><p><img src="https://user-images.githubusercontent.com/33083822/45309358-7fc57380-b55e-11e8-8940-5fe97737f336.png" alt="springboot08"></p><p><img src="https://user-images.githubusercontent.com/33083822/45309359-7fc57380-b55e-11e8-88da-93caa76ee52e.png" alt="springboot09"></p><p><img src="https://user-images.githubusercontent.com/33083822/45309361-805e0a00-b55e-11e8-86d2-f8c36834b1d3.png" alt="springboot10"></p><p><img src="https://user-images.githubusercontent.com/33083822/45309362-805e0a00-b55e-11e8-966f-8a49b77b2d10.png" alt="springboot11"></p><p>이것으로 spring boot 프로젝트 생성 및 기본 설정에 대해서 알아봤고 다음에는 사용할 모듈을 추가하고 그에 맞는 설정들을 진행하겠습다. </p><p>감사합니다.</p><h2 id="Contributors"><a href="#Contributors" class="headerlink" title="Contributors"></a>Contributors</h2><ul><li>오형석<a href="ohs4123@gmail.com">(ohs4123@gmail.com)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://spring.io/projects/spring-boot&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Spring Boot&lt;/a&gt;를 이용한 REST API 서버를 만들기를 정리하려고 합니다. 처음 Spring을 접하고 SpringBoot를 처음 사용했을 때 간단히 따라할 강의나 자료가 부족했고 러닝커브도 심해서 당장 먼가 팍팍 진행된다는 느낌을 못받아서 힘들었던거 같습니다.&lt;/p&gt;
    
    </summary>
    
      <category term="Spring Boot 정리" scheme="http://yoursite.com/categories/Spring-Boot-%EC%A0%95%EB%A6%AC/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="PostgreSQL" scheme="http://yoursite.com/tags/PostgreSQL/"/>
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
      <category term="JUnit" scheme="http://yoursite.com/tags/JUnit/"/>
    
      <category term="lombok" scheme="http://yoursite.com/tags/lombok/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 사용법</title>
    <link href="http://yoursite.com/2018/07/07/hello-world/"/>
    <id>http://yoursite.com/2018/07/07/hello-world/</id>
    <published>2018-07-07T14:07:31.000Z</published>
    <updated>2021-04-12T06:00:25.905Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;br&gt;
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="blog" scheme="http://yoursite.com/tags/blog/"/>
    
  </entry>
  
</feed>
